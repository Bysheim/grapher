{"ast":null,"code":"var _jsxFileName = \"/home/lby005/Desktop/prodj/grapher/src/components/Graph/Graph.tsx\",\n  _s = $RefreshSig$();\nimport { useEffect, useState } from \"react\";\nimport \"../../styles/Canvas/Canvas.css\";\nimport Canvas from \"../Canvas/Canvas\";\nimport InfoBoard from \"../InfoBoard/InfoBoard\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst generateID = (prefix, length) => {\n  const values = \"qwertyuiopasdfghjklzxcvbnmQWERTYUIOPASDFGHJKLZXCVBNM1234567890\";\n  var id = prefix + '-';\n  for (let i = 0; i < length; i++) {\n    let idx = Math.round(Math.random() * (values.length - 1));\n    id += values[idx];\n  }\n  return id;\n};\nconst Graph = props => {\n  _s();\n  const [graph, updateGraph] = useState({\n    weighted: true,\n    directed: false,\n    vertices: {},\n    edges: {}\n  });\n  const [active, setActive] = useState(\"\");\n  const [hovered, setHoverd] = useState(\"\");\n\n  /**\n   * Create a new vertex at the given position.\n   * @param position \n   */\n  const newVertex = position => {\n    //Generate the new vertex with a unique id\n    const id = generateID('vertex', 5);\n    const vertex = {\n      edges: [],\n      position: position,\n      symbol: ''\n    };\n    updateGraph(prev => ({\n      ...prev,\n      vertices: {\n        ...prev.vertices,\n        [id]: vertex\n      }\n    }));\n  };\n\n  /**\n   * Create a new edge between the two given vertices. \n   * @param vertexA \n   * @param vertexB \n   * @returns\n   */\n  const newEdge = (vertexA, vertexB) => {\n    //make sure that both vertices exists\n    if (!(vertexA in graph.vertices && vertexB in graph.vertices)) return;\n\n    //make sure that the edge is between two different vertices (could be removed in the future)\n    if (vertexA == vertexB) return;\n    let double = false;\n\n    //make sure that this is a unique edge. Only one edge can exist between a given set of vertices AB if the graph is undirected. \n    if (Object.entries(graph.edges).map(edge => {\n      if (edge[1].vertices.b == vertexA && edge[1].vertices.a == vertexB) {\n        if (graph.directed) double = true;else return true;\n      }\n      return edge[1].vertices.a == vertexA && edge[1].vertices.b == vertexB;\n    }).some(val => val)) return;\n\n    //Generate the new edge with a unique id\n    const id = generateID('edge', 5);\n    const edge = {\n      vertices: {\n        a: vertexA,\n        b: vertexB\n      },\n      weight: 0,\n      double: double\n    };\n\n    //update the involved vertices to be maped to this new edge\n    const updateVerticies = {\n      ...graph.vertices\n    };\n    updateVerticies[vertexA] = {\n      ...updateVerticies[vertexA],\n      edges: [...updateVerticies[vertexA].edges, id]\n    };\n    updateVerticies[vertexB] = {\n      ...updateVerticies[vertexB],\n      edges: [...updateVerticies[vertexB].edges, id]\n    };\n    updateGraph(prev => ({\n      ...prev,\n      vertices: updateVerticies,\n      edges: {\n        ...prev.edges,\n        [id]: edge\n      }\n    }));\n  };\n  const removeVertex = id => {\n    //make sure that the id exists in the graph\n    if (!(id in graph.vertices)) return;\n    const updateVerticies = {\n      ...graph.vertices\n    };\n    const updateEdges = {\n      ...graph.edges\n    };\n    updateVerticies[id].edges.forEach(e => {\n      let va = updateEdges[e].vertices.a;\n      updateVerticies[va] = {\n        ...updateVerticies[va],\n        edges: updateVerticies[va].edges.filter(edge => edge !== e)\n      };\n      let vb = updateEdges[e].vertices.b;\n      updateVerticies[vb] = {\n        ...updateVerticies[vb],\n        edges: updateVerticies[vb].edges.filter(edge => edge !== e)\n      };\n      delete updateEdges[e];\n    });\n    delete updateVerticies[id];\n    setActive(\"\");\n    updateGraph(prev => ({\n      ...prev,\n      edges: updateEdges,\n      vertices: updateVerticies\n    }));\n  };\n  const removeEdge = id => {\n    //make sure that the id exists in the graph\n    if (!(id in graph.edges)) return;\n    const updateVerticies = {\n      ...graph.vertices\n    };\n    const updateEdges = {\n      ...graph.edges\n    };\n    let va = updateEdges[id].vertices.a;\n    updateVerticies[va] = {\n      ...updateVerticies[va],\n      edges: updateVerticies[va].edges.filter(edge => edge !== id)\n    };\n    let vb = updateEdges[id].vertices.b;\n    updateVerticies[vb] = {\n      ...updateVerticies[vb],\n      edges: updateVerticies[vb].edges.filter(edge => edge !== id)\n    };\n    delete updateEdges[id];\n    setActive(\"\");\n    updateGraph(prev => ({\n      ...prev,\n      edges: updateEdges,\n      vertices: updateVerticies\n    }));\n  };\n  const moveVertex = (id, newPosition) => {\n    const updateVerticies = {\n      ...graph.vertices\n    };\n    updateVerticies[id] = {\n      ...updateVerticies[id],\n      position: newPosition\n    };\n    updateGraph(prev => ({\n      ...prev,\n      vertices: updateVerticies\n    }));\n  };\n  const editWeight = (id, value) => {\n    const updateEdges = {\n      ...graph.edges\n    };\n    updateEdges[id] = {\n      ...updateEdges[id],\n      weight: value\n    };\n    console.log(typeof value);\n    updateGraph(prev => ({\n      ...prev,\n      edges: updateEdges\n    }));\n  };\n  const editLabel = (id, value) => {\n    const updateVerticies = {\n      ...graph.vertices\n    };\n    updateVerticies[id] = {\n      ...updateVerticies[id],\n      symbol: value\n    };\n    updateGraph(prev => ({\n      ...prev,\n      vertices: updateVerticies\n    }));\n  };\n  useEffect(() => {\n    Object.entries(graph.edges).map(edge => {\n      if (edge[1].double) removeEdge(edge[0]);\n    });\n  }, [graph.directed]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      display: 'flex',\n      flexDirection: 'row',\n      position: 'absolute',\n      height: '100% !important'\n    },\n    children: [/*#__PURE__*/_jsxDEV(Canvas, {\n      graph: graph,\n      grafEdit: {\n        newVertex: newVertex,\n        deleteVertex: removeVertex,\n        newEdge: newEdge,\n        deleteEdge: removeEdge,\n        moveVertex: moveVertex\n      },\n      active: active,\n      setActive: setActive,\n      hovered: hovered,\n      setHoverd: setHoverd\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 189,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        position: 'absolute'\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"checkbox\",\n          checked: graph.directed,\n          onChange: () => updateGraph(prev => ({\n            ...prev,\n            directed: !prev.directed\n          }))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 205,\n          columnNumber: 17\n        }, this), \"Directed\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 204,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"checkbox\",\n          checked: graph.weighted,\n          onChange: () => updateGraph(prev => ({\n            ...prev,\n            weighted: !prev.weighted\n          }))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 209,\n          columnNumber: 17\n        }, this), \"Weighted\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 208,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 203,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(InfoBoard, {\n      graph: graph,\n      active: active,\n      setActive: setActive,\n      setHovered: setHoverd,\n      editWeight: editWeight,\n      editLabel: editLabel\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 214,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 188,\n    columnNumber: 9\n  }, this);\n};\n_s(Graph, \"iLWwormD0l+C3ksutKAJVxmRxL4=\");\n_c = Graph;\nexport default Graph;\nvar _c;\n$RefreshReg$(_c, \"Graph\");","map":{"version":3,"names":["useEffect","useState","Canvas","InfoBoard","jsxDEV","_jsxDEV","generateID","prefix","length","values","id","i","idx","Math","round","random","Graph","props","_s","graph","updateGraph","weighted","directed","vertices","edges","active","setActive","hovered","setHoverd","newVertex","position","vertex","symbol","prev","newEdge","vertexA","vertexB","double","Object","entries","map","edge","b","a","some","val","weight","updateVerticies","removeVertex","updateEdges","forEach","e","va","filter","vb","removeEdge","moveVertex","newPosition","editWeight","value","console","log","editLabel","style","display","flexDirection","height","children","grafEdit","deleteVertex","deleteEdge","fileName","_jsxFileName","lineNumber","columnNumber","type","checked","onChange","setHovered","_c","$RefreshReg$"],"sources":["/home/lby005/Desktop/prodj/grapher/src/components/Graph/Graph.tsx"],"sourcesContent":["import { MouseEvent, ReactNode, useCallback, useEffect, useRef, useState } from \"react\";\nimport \"../../styles/Canvas/Canvas.css\";\nimport Canvas from \"../Canvas/Canvas\";\n\nimport def_graph from './default.json';\nimport InfoBoard from \"../InfoBoard/InfoBoard\";\n\ninterface IVertex {\n    edges : string[]\n    position : {x: number, y: number},\n    symbol: string\n}\n\ninterface IEdge {\n    vertices : {a: string, b: string},\n    weight : number,\n    double : boolean,\n}\n\nexport interface IGraph {\n    weighted : boolean,\n    directed : boolean,\n    vertices : { [id: string] : IVertex },\n    edges : { [id: string] : IEdge }\n}\n\ninterface Props {\n\n}\n\nconst generateID = (prefix: string, length: number) => {\n    const values = \"qwertyuiopasdfghjklzxcvbnmQWERTYUIOPASDFGHJKLZXCVBNM1234567890\";\n    var id = prefix + '-';\n    for (let i = 0; i < length; i++) {\n        let idx = Math.round(Math.random() * (values.length-1));\n        id += values[idx];\n    }\n    return id;\n}\n\n\nconst Graph = (props: Props) => {\n\n    const [graph, updateGraph] = useState<IGraph>({weighted: true, directed: false, vertices: {}, edges : {}});\n    const [active, setActive] = useState<string>(\"\");\n    const [hovered, setHoverd] = useState<string>(\"\");\n\n    /**\n     * Create a new vertex at the given position.\n     * @param position \n     */\n    const newVertex = (position:{x:number,y:number}) => {\n        //Generate the new vertex with a unique id\n        const id = generateID('vertex',5);\n        const vertex : IVertex = {\n            edges : [],\n            position : position,\n            symbol: ''\n        }\n\n        updateGraph((prev: IGraph) => ({...prev, vertices : {...prev.vertices, [id] : vertex}}))\n    }\n    \n    /**\n     * Create a new edge between the two given vertices. \n     * @param vertexA \n     * @param vertexB \n     * @returns\n     */\n    const newEdge = (vertexA : string, vertexB : string) => {\n\n        //make sure that both vertices exists\n        if (!(vertexA in graph.vertices && vertexB in graph.vertices)) return\n     \n        //make sure that the edge is between two different vertices (could be removed in the future)\n        if ( vertexA == vertexB ) return;\n\n        let double = false;\n\n        //make sure that this is a unique edge. Only one edge can exist between a given set of vertices AB if the graph is undirected. \n        if ( Object.entries(graph.edges).map(edge => {\n            if ( edge[1].vertices.b == vertexA && edge[1].vertices.a == vertexB ) {\n                if (graph.directed) double = true;\n                else return true;\n            }\n            return (edge[1].vertices.a == vertexA && edge[1].vertices.b == vertexB);\n        }).some(val => val)) return;\n\n        //Generate the new edge with a unique id\n        const id = generateID('edge',5);\n        const edge : IEdge = {\n            vertices : {a: vertexA, b: vertexB},\n            weight : 0,\n            double : double\n        }\n\n        //update the involved vertices to be maped to this new edge\n        const updateVerticies = {...graph.vertices};     \n        updateVerticies[vertexA] = {...updateVerticies[vertexA], edges :  [...updateVerticies[vertexA].edges, id]}\n        updateVerticies[vertexB] = {...updateVerticies[vertexB], edges :  [...updateVerticies[vertexB].edges, id]}\n\n        updateGraph((prev: IGraph) => ({...prev, vertices: updateVerticies, edges : {...prev.edges, [id] : edge}}))\n        \n    }\n\n\n    const removeVertex = (id : string) => {\n        //make sure that the id exists in the graph\n        if (!(id in graph.vertices)) return;\n\n        const updateVerticies = {...graph.vertices};\n        const updateEdges = {...graph.edges};\n\n        updateVerticies[id].edges.forEach(e => {\n\n            let va = updateEdges[e].vertices.a;\n            updateVerticies[va] = {...updateVerticies[va], edges :  updateVerticies[va].edges.filter(edge => edge !== e)};\n            \n            let vb = updateEdges[e].vertices.b;\n            updateVerticies[vb] = {...updateVerticies[vb], edges :  updateVerticies[vb].edges.filter(edge => edge !== e)};\n\n\n            delete updateEdges[e];\n        });\n    \n        delete updateVerticies[id];\n\n        setActive(\"\");\n\n        updateGraph((prev: IGraph) => ({...prev, edges : updateEdges, vertices : updateVerticies}))\n    }\n\n    const removeEdge = (id : string) => {\n        //make sure that the id exists in the graph\n        if (!(id in graph.edges)) return;\n\n        const updateVerticies = {...graph.vertices};\n        const updateEdges = {...graph.edges};\n\n        let va = updateEdges[id].vertices.a\n        updateVerticies[va] = {...updateVerticies[va], edges :updateVerticies[va].edges.filter(edge => edge !== id)}\n        let vb = updateEdges[id].vertices.b\n        updateVerticies[vb] = {...updateVerticies[vb], edges :updateVerticies[vb].edges.filter(edge => edge !== id)}\n        \n        delete updateEdges[id];\n        \n        setActive(\"\");\n\n        updateGraph((prev: IGraph) => ({...prev, edges : updateEdges, vertices : updateVerticies}))\n    }\n\n\n    const moveVertex = (id: string, newPosition: {x: number, y: number}) => {\n      \n        const updateVerticies = {...graph.vertices};     \n        updateVerticies[id] = {...updateVerticies[id], position :  newPosition}\n\n        updateGraph((prev: IGraph) => ({...prev, vertices : updateVerticies}))\n    }\n\n    const editWeight = (id: string, value: number) => {    \n        const updateEdges = {...graph.edges};\n        updateEdges[id] = {...updateEdges[id], weight : value};\n\n        console.log(typeof(value));\n\n        updateGraph((prev: IGraph) => ({...prev, edges : updateEdges}))\n    }\n\n    const editLabel = (id: string, value: string) => {    \n        const updateVerticies = {...graph.vertices};     \n        updateVerticies[id] = {...updateVerticies[id], symbol :  value}\n\n        updateGraph((prev: IGraph) => ({...prev, vertices : updateVerticies}))\n    }\n\n\n    useEffect(() => {\n        \n        Object.entries(graph.edges).map( edge => {\n            if ( edge[1].double ) removeEdge(edge[0]);\n        })\n        \n    }, [graph.directed])\n\n\n    return (\n        <div style={{display:'flex', flexDirection:'row', position:'absolute', height: '100% !important'}}>\n            <Canvas \n                graph={graph}\n                grafEdit={{ \n                    newVertex: newVertex,\n                    deleteVertex: removeVertex,\n                    newEdge: newEdge,\n                    deleteEdge: removeEdge,\n                    moveVertex: moveVertex \n                }}\n                active={active}\n                setActive={setActive}\n                hovered={hovered}\n                setHoverd={setHoverd}></Canvas>\n\n            <div style={{position:'absolute'}}>\n            <label>\n                <input type=\"checkbox\" checked={graph.directed} onChange={() => updateGraph((prev: IGraph) => ({...prev, directed : !prev.directed}))}/>\n                Directed\n            </label>\n            <label>\n                <input type=\"checkbox\" checked={graph.weighted} onChange={() => updateGraph((prev: IGraph) => ({...prev, weighted : !prev.weighted}))}/>\n                Weighted\n            </label>\n            </div>\n\n            <InfoBoard \n                graph={graph} \n                active={active}\n                setActive={setActive}\n                setHovered={setHoverd}\n                editWeight={editWeight}\n                editLabel={editLabel}>\n            </InfoBoard>\n\n        </div>\n    );\n};\n\nexport default Graph;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}