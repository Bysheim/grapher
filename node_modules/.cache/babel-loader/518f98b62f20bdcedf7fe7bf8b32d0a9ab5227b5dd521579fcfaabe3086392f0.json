{"ast":null,"code":"/**\n * returns the normal of a vector between two points\n * @param p1 start of the vector\n * @param p2 end of the vector\n * @param length adjust the length of the normal\n * @returns the normal of the vector, with length = length\n */\nexport const normal = (p1, p2, length = 2) => {\n  let dx = p2.x - p1.x;\n  let dy = p2.y - p1.y;\n  let dLength = Math.sqrt(dx ** 2 + dy ** 2);\n  return {\n    x: -dy / dLength * length,\n    y: dx / dLength * length\n  };\n};\n\n/**\n * the average of two numbers\n * @param a first number\n * @param b second number\n * @returns the average of a and b\n */\nexport const average = (a, b) => {\n  return (a + b) / 2;\n};\n\n/**\n * contain a value between two other values\n * @param value the value to contain\n * @param min if the value is smaller than min, return min\n * @param max if the value is greater than max, return max\n * @returns \n */\nexport const contain = (value, min, max) => {\n  return Math.min(Math.max(value, min), max);\n};\n\n/**\n * Get the position in percentage of a value in a range of a given length starting in min.\n * @param value the value to find the position of\n * @param min the start of the range\n * @param length the length of the range\n * @returns some value between 0 and 100\n */\nexport const relPos = (value, min, length) => {\n  return contain((value - min) * 100 / length, 0, 100);\n};","map":{"version":3,"names":["normal","p1","p2","length","dx","x","dy","y","dLength","Math","sqrt","average","a","b","contain","value","min","max","relPos"],"sources":["/home/lby005/Desktop/prodj/delt/grapher/src/tools/Geometry.ts"],"sourcesContent":["\n/**\n * returns the normal of a vector between two points\n * @param p1 start of the vector\n * @param p2 end of the vector\n * @param length adjust the length of the normal\n * @returns the normal of the vector, with length = length\n */\nexport const normal = (p1:{x:number,y:number}, p2: {x:number,y:number}, length : number = 2) => {\n    let dx = p2.x - p1.x;\n    let dy = p2.y - p1.y;\n\n    let dLength = Math.sqrt(dx ** 2 + dy**2);\n    \n    return {x : -dy/dLength * length, y : dx/dLength * length};\n}\n\n/**\n * the average of two numbers\n * @param a first number\n * @param b second number\n * @returns the average of a and b\n */\nexport const average = (a:number, b: number) => {\n    return (a + b) / 2\n}\n\n/**\n * contain a value between two other values\n * @param value the value to contain\n * @param min if the value is smaller than min, return min\n * @param max if the value is greater than max, return max\n * @returns \n */\nexport const contain = (value:number, min: number, max: number) => {\n    return Math.min(Math.max(value,min),max);\n}\n\n/**\n * Get the position in percentage of a value in a range of a given length starting in min.\n * @param value the value to find the position of\n * @param min the start of the range\n * @param length the length of the range\n * @returns some value between 0 and 100\n */\nexport const relPos = (value:number, min: number, length:number) => {\n    return  contain((value - min) * 100/length,0,100);\n}"],"mappings":"AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMA,MAAM,GAAGA,CAACC,EAAsB,EAAEC,EAAuB,EAAEC,MAAe,GAAG,CAAC,KAAK;EAC5F,IAAIC,EAAE,GAAGF,EAAE,CAACG,CAAC,GAAGJ,EAAE,CAACI,CAAC;EACpB,IAAIC,EAAE,GAAGJ,EAAE,CAACK,CAAC,GAAGN,EAAE,CAACM,CAAC;EAEpB,IAAIC,OAAO,GAAGC,IAAI,CAACC,IAAI,CAACN,EAAE,IAAI,CAAC,GAAGE,EAAE,IAAE,CAAC,CAAC;EAExC,OAAO;IAACD,CAAC,EAAG,CAACC,EAAE,GAACE,OAAO,GAAGL,MAAM;IAAEI,CAAC,EAAGH,EAAE,GAACI,OAAO,GAAGL;EAAM,CAAC;AAC9D,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMQ,OAAO,GAAGA,CAACC,CAAQ,EAAEC,CAAS,KAAK;EAC5C,OAAO,CAACD,CAAC,GAAGC,CAAC,IAAI,CAAC;AACtB,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMC,OAAO,GAAGA,CAACC,KAAY,EAAEC,GAAW,EAAEC,GAAW,KAAK;EAC/D,OAAOR,IAAI,CAACO,GAAG,CAACP,IAAI,CAACQ,GAAG,CAACF,KAAK,EAACC,GAAG,CAAC,EAACC,GAAG,CAAC;AAC5C,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMC,MAAM,GAAGA,CAACH,KAAY,EAAEC,GAAW,EAAEb,MAAa,KAAK;EAChE,OAAQW,OAAO,CAAC,CAACC,KAAK,GAAGC,GAAG,IAAI,GAAG,GAACb,MAAM,EAAC,CAAC,EAAC,GAAG,CAAC;AACrD,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}