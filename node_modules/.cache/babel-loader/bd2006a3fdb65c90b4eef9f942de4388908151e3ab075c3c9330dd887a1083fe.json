{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\larsb\\\\Desktop\\\\knowit\\\\grapher\\\\src\\\\components\\\\Graph\\\\Graph.tsx\",\n  _s = $RefreshSig$();\nimport { useState } from \"react\";\nimport \"../../styles/Graph/Graph.css\";\nimport Canvas from \"../Canvas/Canvas\";\nimport def_graph from './default.json';\nimport InfoBoard from \"../InfoBoard/InfoBoard\";\nimport Toolbar from \"../ToolBar/Toolbar\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n;\n\n/**\r\n * Generates a random id on the format \"prefix-xxxx\"\r\n * @param prefix indicates what type of component this id is for\r\n * @param length the lenght of the random symbols following the prefix\r\n * @returns \r\n */\nconst generateID = (prefix, length) => {\n  const values = \"qwertyuiopasdfghjklzxcvbnmQWERTYUIOPASDFGHJKLZXCVBNM1234567890\";\n  var id = prefix + '-';\n  for (let i = 0; i < length; i++) {\n    let idx = Math.round(Math.random() * (values.length - 1));\n    id += values[idx];\n  }\n  return id;\n};\nconst Graph = props => {\n  _s();\n  const [graph, updateGraph] = useState(def_graph);\n  const [active, setActive] = useState(\"\");\n  const [hovered, setHoverd] = useState(\"\");\n  const [toolState, setToolstate] = useState(\"select\");\n\n  /**\r\n   * Create a new vertex at the given position.\r\n   * @param position \r\n   */\n  const newVertex = position => {\n    //Generate the new vertex with a unique id\n    const id = generateID('vertex', 5);\n    const vertex = {\n      edges: [],\n      position: position,\n      symbol: ''\n    };\n    updateGraph(prev => ({\n      ...prev,\n      vertices: {\n        ...prev.vertices,\n        [id]: vertex\n      }\n    }));\n    setActive(prev => id);\n  };\n\n  /**\r\n   * Create a new edge between the two given vertices. \r\n   * @param vertexA \r\n   * @param vertexB \r\n   * @returns\r\n   */\n  const newEdge = (vertexA, vertexB) => {\n    //make sure that both vertices exists\n    if (!(vertexA in graph.vertices && vertexB in graph.vertices)) return;\n\n    //make sure that the edge is between two different vertices (could be removed in the future)\n    if (vertexA == vertexB) return;\n    let double = false;\n\n    //make sure that this is a unique edge. Only one edge can exist between a given set of vertices AB if the graph is undirected. \n    if (Object.entries(graph.edges).map(edge => {\n      if (edge[1].vertices.b == vertexA && edge[1].vertices.a == vertexB) {\n        if (graph.directed) double = true;else return true;\n      }\n      return edge[1].vertices.a == vertexA && edge[1].vertices.b == vertexB;\n    }).some(val => val)) return;\n\n    //Generate the new edge with a unique id\n    const id = generateID('edge', 5);\n    const edge = {\n      vertices: {\n        a: vertexA,\n        b: vertexB\n      },\n      weight: 0,\n      double: double\n    };\n\n    //update the involved vertices to be maped to this new edge\n    const updateVerticies = {\n      ...graph.vertices\n    };\n    updateVerticies[vertexA] = {\n      ...updateVerticies[vertexA],\n      edges: [...updateVerticies[vertexA].edges, id]\n    };\n    updateVerticies[vertexB] = {\n      ...updateVerticies[vertexB],\n      edges: [...updateVerticies[vertexB].edges, id]\n    };\n    updateGraph(prev => ({\n      ...prev,\n      vertices: updateVerticies,\n      edges: {\n        ...prev.edges,\n        [id]: edge\n      }\n    }));\n    setActive(prev => id);\n  };\n\n  /**\r\n   * Remove the given vertex, and all edges connected to it\r\n   * @param id the id of the vertex\r\n   * @returns \r\n   */\n  const removeVertex = id => {\n    //make sure that the id exists in the graph\n    if (!(id in graph.vertices)) return;\n    const updateVerticies = {\n      ...graph.vertices\n    };\n    const updateEdges = {\n      ...graph.edges\n    };\n\n    //remove all connected edges and update their other connected node to no longer refrence this edge.\n    updateVerticies[id].edges.forEach(e => {\n      let va = updateEdges[e].vertices.a;\n      updateVerticies[va] = {\n        ...updateVerticies[va],\n        edges: updateVerticies[va].edges.filter(edge => edge !== e)\n      };\n      let vb = updateEdges[e].vertices.b;\n      updateVerticies[vb] = {\n        ...updateVerticies[vb],\n        edges: updateVerticies[vb].edges.filter(edge => edge !== e)\n      };\n      delete updateEdges[e];\n    });\n    delete updateVerticies[id];\n    updateGraph(prev => ({\n      ...prev,\n      edges: updateEdges,\n      vertices: updateVerticies\n    }));\n    setActive(prev => \"\");\n  };\n\n  /**\r\n   * Remove the given edge\r\n   * @param id the id of the edge to remove\r\n   * @returns \r\n   */\n  const removeEdge = id => {\n    //make sure that the id exists in the graph\n    if (!(id in graph.edges)) return;\n    const updateVerticies = {\n      ...graph.vertices\n    };\n    const updateEdges = {\n      ...graph.edges\n    };\n\n    //remove the edge and update the connected vertices to no longer refrence this edge\n    let va = updateEdges[id].vertices.a;\n    updateVerticies[va] = {\n      ...updateVerticies[va],\n      edges: updateVerticies[va].edges.filter(edge => edge !== id)\n    };\n    let vb = updateEdges[id].vertices.b;\n    updateVerticies[vb] = {\n      ...updateVerticies[vb],\n      edges: updateVerticies[vb].edges.filter(edge => edge !== id)\n    };\n    delete updateEdges[id];\n    updateGraph(prev => ({\n      ...prev,\n      edges: updateEdges,\n      vertices: updateVerticies\n    }));\n    setActive(prev => \"\");\n  };\n\n  /**\r\n   * move a vertex to a new position\r\n   * @param id the id of the vertex to move\r\n   * @param newPosition the new position for the vertex\r\n   */\n  const moveVertex = (id, newPosition) => {\n    const updateVerticies = {\n      ...graph.vertices\n    };\n    updateVerticies[id] = {\n      ...updateVerticies[id],\n      position: newPosition\n    };\n    updateGraph(prev => ({\n      ...prev,\n      vertices: updateVerticies\n    }));\n  };\n\n  /**\r\n   * Set a new weight value for an edge in a weighted graph\r\n   * @param id the id of the edge to update\r\n   * @param value the new weight\r\n   */\n  const editWeight = (id, value) => {\n    const updateEdges = {\n      ...graph.edges\n    };\n    updateEdges[id] = {\n      ...updateEdges[id],\n      weight: value\n    };\n    updateGraph(prev => ({\n      ...prev,\n      edges: updateEdges\n    }));\n  };\n\n  /**\r\n   * Set a new label for a vertex\r\n   * @param id the id of the vertex to update\r\n   * @param value the new label\r\n   */\n  const editLabel = (id, value) => {\n    const updateVerticies = {\n      ...graph.vertices\n    };\n    updateVerticies[id] = {\n      ...updateVerticies[id],\n      symbol: value\n    };\n    updateGraph(prev => ({\n      ...prev,\n      vertices: updateVerticies\n    }));\n  };\n\n  /**\r\n   * fetch a color based on if the components id is marked as active, hovered or none of them\r\n   * @param id the id of the graph component\r\n   * @returns a string representing a color name or color code.\r\n   */\n  const getColor = id => {\n    return active == id ? \"salmon\" : hovered == id ? \"skyblue\" : \"#F3E99F\";\n  };\n\n  /**\r\n   * Checks if an id belongs to a vertex. Should be used with ids generated by the generateID method.\r\n   * @param id the id to check\r\n   * @returns true if the prefix of the id is 'vertex', false if not\r\n   */\n  const isVertex = id => {\n    return id.split('-')[0] == 'vertex';\n  };\n\n  /**\r\n   * Based on the toolstate, this method determins what to do when this method is called from a component.\r\n   * @param id the id of the component calling the method\r\n   * @param position the position of the cursor at the time of calling this method\r\n   */\n  const update = (id = \"\", position) => {\n    let vertex = isVertex(id);\n    switch (toolState) {\n      case 'select':\n        if (vertex) moveVertex(id, position);\n        if (id != \"\") setActive(prev => id);\n        break;\n      case 'delete':\n        vertex ? removeVertex(id) : removeEdge(id);\n        break;\n      case 'add':\n        if (vertex && isVertex(active)) newEdge(active, id);else if (id == \"\") newVertex(position);else setActive(prev => id);\n        break;\n      default:\n        break;\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"graph-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"graph-header\",\n      children: \"Grapher\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 253,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"graph-body\",\n      children: [/*#__PURE__*/_jsxDEV(InfoBoard, {\n        graph: graph,\n        active: active,\n        setActive: setActive,\n        setHovered: setHoverd,\n        editWeight: editWeight,\n        editLabel: editLabel\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 257,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Canvas, {\n        graph: graph,\n        updateGraph: update,\n        active: active,\n        hovered: hovered,\n        setHoverd: setHoverd,\n        getColor: getColor\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 265,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: \" her kommer algoritmeverkt\\xF8y\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 274,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 256,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"graph-footer\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        onChange: () => setActive(\"\"),\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"checkbox\",\n            checked: graph.directed,\n            onChange: () => updateGraph(prev => ({\n              ...prev,\n              directed: !prev.directed\n            }))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 280,\n            columnNumber: 25\n          }, this), \"Directed\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 279,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"checkbox\",\n            checked: graph.weighted,\n            onChange: () => updateGraph(prev => ({\n              ...prev,\n              weighted: !prev.weighted\n            }))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 284,\n            columnNumber: 25\n          }, this), \"Weighted\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 283,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 278,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Toolbar, {\n        toolState: toolState,\n        setToolState: newState => {\n          setToolstate(prev => newState);\n          setActive('');\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 289,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 277,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 252,\n    columnNumber: 9\n  }, this);\n};\n_s(Graph, \"zpkjkafBhnquw7+AVcdQMzqrtj8=\");\n_c = Graph;\nexport default Graph;\nvar _c;\n$RefreshReg$(_c, \"Graph\");","map":{"version":3,"names":["useState","Canvas","def_graph","InfoBoard","Toolbar","jsxDEV","_jsxDEV","generateID","prefix","length","values","id","i","idx","Math","round","random","Graph","props","_s","graph","updateGraph","active","setActive","hovered","setHoverd","toolState","setToolstate","newVertex","position","vertex","edges","symbol","prev","vertices","newEdge","vertexA","vertexB","double","Object","entries","map","edge","b","a","directed","some","val","weight","updateVerticies","removeVertex","updateEdges","forEach","e","va","filter","vb","removeEdge","moveVertex","newPosition","editWeight","value","editLabel","getColor","isVertex","split","update","className","children","fileName","_jsxFileName","lineNumber","columnNumber","setHovered","onChange","type","checked","weighted","setToolState","newState","_c","$RefreshReg$"],"sources":["C:/Users/larsb/Desktop/knowit/grapher/src/components/Graph/Graph.tsx"],"sourcesContent":["import { useState } from \"react\";\r\nimport \"../../styles/Graph/Graph.css\";\r\nimport Canvas from \"../Canvas/Canvas\";\r\n\r\nimport def_graph from './default.json';\r\nimport InfoBoard from \"../InfoBoard/InfoBoard\";\r\nimport Toolbar from \"../ToolBar/Toolbar\";\r\n\r\ninterface IVertex {\r\n    edges : string[]\r\n    position : {x: number, y: number},\r\n    symbol: string\r\n}\r\n\r\ninterface IEdge {\r\n    vertices : {a: string, b: string},\r\n    weight : number,\r\n    double : boolean,\r\n}\r\n\r\nexport interface IGraph {\r\n    weighted : boolean,\r\n    directed : boolean,\r\n    vertices : { [id: string] : IVertex },\r\n    edges : { [id: string] : IEdge }\r\n}\r\n\r\ninterface Props {};\r\n\r\n/**\r\n * Generates a random id on the format \"prefix-xxxx\"\r\n * @param prefix indicates what type of component this id is for\r\n * @param length the lenght of the random symbols following the prefix\r\n * @returns \r\n */\r\nconst generateID = (prefix: string, length: number) => {\r\n    const values = \"qwertyuiopasdfghjklzxcvbnmQWERTYUIOPASDFGHJKLZXCVBNM1234567890\";\r\n    var id = prefix + '-';\r\n    for (let i = 0; i < length; i++) {\r\n        let idx = Math.round(Math.random() * (values.length-1));\r\n        id += values[idx];\r\n    }\r\n    return id;\r\n}\r\n\r\n\r\nconst Graph = (props: Props) => {\r\n\r\n    const [graph, updateGraph] = useState<IGraph>(def_graph);\r\n    const [active, setActive] = useState<string>(\"\");\r\n    const [hovered, setHoverd] = useState<string>(\"\");\r\n    const [toolState, setToolstate] = useState<string>(\"select\");\r\n\r\n\r\n    /**\r\n     * Create a new vertex at the given position.\r\n     * @param position \r\n     */\r\n    const newVertex = (position:{x:number,y:number}) => {\r\n        //Generate the new vertex with a unique id\r\n        const id = generateID('vertex',5);\r\n        const vertex : IVertex = {\r\n            edges : [],\r\n            position : position,\r\n            symbol: ''\r\n        }\r\n\r\n        updateGraph((prev: IGraph) => ({...prev, vertices : {...prev.vertices, [id] : vertex}}))\r\n        setActive((prev) => id);\r\n    }\r\n\r\n    \r\n    /**\r\n     * Create a new edge between the two given vertices. \r\n     * @param vertexA \r\n     * @param vertexB \r\n     * @returns\r\n     */\r\n    const newEdge = (vertexA : string, vertexB : string) => {\r\n\r\n        //make sure that both vertices exists\r\n        if (!(vertexA in graph.vertices && vertexB in graph.vertices)) return\r\n     \r\n        //make sure that the edge is between two different vertices (could be removed in the future)\r\n        if ( vertexA == vertexB ) return;\r\n\r\n        let double = false;\r\n\r\n        //make sure that this is a unique edge. Only one edge can exist between a given set of vertices AB if the graph is undirected. \r\n        if ( Object.entries(graph.edges).map(edge => {\r\n            if ( edge[1].vertices.b == vertexA && edge[1].vertices.a == vertexB ) {\r\n                if (graph.directed) double = true;\r\n                else return true;\r\n            }\r\n            return (edge[1].vertices.a == vertexA && edge[1].vertices.b == vertexB);\r\n        }).some(val => val)) return;\r\n\r\n        //Generate the new edge with a unique id\r\n        const id = generateID('edge',5);\r\n        const edge : IEdge = {\r\n            vertices : {a: vertexA, b: vertexB},\r\n            weight : 0,\r\n            double : double\r\n        }\r\n\r\n        //update the involved vertices to be maped to this new edge\r\n        const updateVerticies = {...graph.vertices};     \r\n        updateVerticies[vertexA] = {...updateVerticies[vertexA], edges :  [...updateVerticies[vertexA].edges, id]}\r\n        updateVerticies[vertexB] = {...updateVerticies[vertexB], edges :  [...updateVerticies[vertexB].edges, id]}\r\n\r\n        updateGraph((prev: IGraph) => ({...prev, vertices: updateVerticies, edges : {...prev.edges, [id] : edge}}))\r\n        setActive((prev) => id);\r\n    }\r\n\r\n    /**\r\n     * Remove the given vertex, and all edges connected to it\r\n     * @param id the id of the vertex\r\n     * @returns \r\n     */\r\n    const removeVertex = (id : string) => {\r\n        //make sure that the id exists in the graph\r\n        if (!(id in graph.vertices)) return;\r\n\r\n        const updateVerticies = {...graph.vertices};\r\n        const updateEdges = {...graph.edges};\r\n\r\n        //remove all connected edges and update their other connected node to no longer refrence this edge.\r\n        updateVerticies[id].edges.forEach(e => {\r\n\r\n            let va = updateEdges[e].vertices.a;\r\n            updateVerticies[va] = {...updateVerticies[va], edges :  updateVerticies[va].edges.filter(edge => edge !== e)};\r\n            \r\n            let vb = updateEdges[e].vertices.b;\r\n            updateVerticies[vb] = {...updateVerticies[vb], edges :  updateVerticies[vb].edges.filter(edge => edge !== e)};\r\n\r\n\r\n            delete updateEdges[e];\r\n        });\r\n    \r\n        delete updateVerticies[id];\r\n\r\n        updateGraph((prev: IGraph) => ({...prev, edges : updateEdges, vertices : updateVerticies}))\r\n        setActive((prev) => \"\");\r\n    }\r\n\r\n    /**\r\n     * Remove the given edge\r\n     * @param id the id of the edge to remove\r\n     * @returns \r\n     */\r\n    const removeEdge = (id : string) => {\r\n        //make sure that the id exists in the graph\r\n        if (!(id in graph.edges)) return;\r\n\r\n        const updateVerticies = {...graph.vertices};\r\n        const updateEdges = {...graph.edges};\r\n\r\n        //remove the edge and update the connected vertices to no longer refrence this edge\r\n        let va = updateEdges[id].vertices.a\r\n        updateVerticies[va] = {...updateVerticies[va], edges :updateVerticies[va].edges.filter(edge => edge !== id)}\r\n        let vb = updateEdges[id].vertices.b\r\n        updateVerticies[vb] = {...updateVerticies[vb], edges :updateVerticies[vb].edges.filter(edge => edge !== id)}\r\n        \r\n        delete updateEdges[id];\r\n\r\n        updateGraph((prev: IGraph) => ({...prev, edges : updateEdges, vertices : updateVerticies}))\r\n        setActive((prev) => \"\");\r\n    }\r\n\r\n \r\n    /**\r\n     * move a vertex to a new position\r\n     * @param id the id of the vertex to move\r\n     * @param newPosition the new position for the vertex\r\n     */\r\n    const moveVertex = (id: string, newPosition: {x: number, y: number}) => {\r\n        const updateVerticies = {...graph.vertices};     \r\n        updateVerticies[id] = {...updateVerticies[id], position :  newPosition}\r\n\r\n        updateGraph((prev: IGraph) => ({...prev, vertices : updateVerticies}))\r\n    }\r\n\r\n    /**\r\n     * Set a new weight value for an edge in a weighted graph\r\n     * @param id the id of the edge to update\r\n     * @param value the new weight\r\n     */\r\n    const editWeight = (id: string, value: number) => {    \r\n        const updateEdges = {...graph.edges};\r\n        updateEdges[id] = {...updateEdges[id], weight : value};\r\n\r\n        updateGraph((prev: IGraph) => ({...prev, edges : updateEdges}))\r\n    }\r\n\r\n    /**\r\n     * Set a new label for a vertex\r\n     * @param id the id of the vertex to update\r\n     * @param value the new label\r\n     */\r\n    const editLabel = (id: string, value: string) => {    \r\n        const updateVerticies = {...graph.vertices};     \r\n        updateVerticies[id] = {...updateVerticies[id], symbol :  value}\r\n\r\n        updateGraph((prev: IGraph) => ({...prev, vertices : updateVerticies}))\r\n    }\r\n\r\n    /**\r\n     * fetch a color based on if the components id is marked as active, hovered or none of them\r\n     * @param id the id of the graph component\r\n     * @returns a string representing a color name or color code.\r\n     */\r\n    const getColor = (id:string) => {\r\n        return active == id ? \"salmon\" : hovered == id ? \"skyblue\" : \"#F3E99F\"\r\n    };\r\n\r\n    /**\r\n     * Checks if an id belongs to a vertex. Should be used with ids generated by the generateID method.\r\n     * @param id the id to check\r\n     * @returns true if the prefix of the id is 'vertex', false if not\r\n     */\r\n    const isVertex = (id: string) => {\r\n        return id.split('-')[0] == 'vertex';\r\n    }\r\n\r\n    /**\r\n     * Based on the toolstate, this method determins what to do when this method is called from a component.\r\n     * @param id the id of the component calling the method\r\n     * @param position the position of the cursor at the time of calling this method\r\n     */\r\n    const update = (id : string = \"\", position : {x:number, y: number}) => {\r\n        let vertex = isVertex(id); \r\n        \r\n        switch (toolState) {\r\n            case 'select':\r\n                if ( vertex ) moveVertex(id,position);\r\n                if ( id != \"\") setActive((prev) => id);\r\n                break;\r\n            case 'delete':\r\n                vertex ? removeVertex(id) : removeEdge(id);\r\n                break;\r\n            case 'add':\r\n                if ( vertex && isVertex(active) ) newEdge(active,id);\r\n                else if ( id == \"\" ) newVertex(position);\r\n                else setActive((prev) => id);\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className=\"graph-container\">\r\n            <div className=\"graph-header\">\r\n                Grapher\r\n            </div>\r\n            <div className=\"graph-body\">\r\n                <InfoBoard \r\n                    graph={graph} \r\n                    active={active}\r\n                    setActive={setActive}\r\n                    setHovered={setHoverd}\r\n                    editWeight={editWeight}\r\n                    editLabel={editLabel}></InfoBoard>\r\n\r\n                <Canvas \r\n                    graph={graph}\r\n                    updateGraph={update}\r\n                    active={active}\r\n                    hovered={hovered}\r\n                    setHoverd={setHoverd}\r\n                    getColor={getColor}\r\n                ></Canvas>\r\n\r\n                <div> her kommer algoritmeverktøy</div>\r\n\r\n            </div>\r\n            <div className=\"graph-footer\">\r\n                <div onChange={() => setActive(\"\")}>\r\n                    <label>\r\n                        <input type=\"checkbox\" checked={graph.directed} onChange={() => updateGraph((prev: IGraph) => ({...prev, directed : !prev.directed}))}/>\r\n                        Directed\r\n                    </label>\r\n                    <label>\r\n                        <input type=\"checkbox\" checked={graph.weighted} onChange={() => updateGraph((prev: IGraph) => ({...prev, weighted : !prev.weighted}))}/>\r\n                        Weighted\r\n                    </label>\r\n                </div>\r\n                \r\n                <Toolbar toolState={toolState} setToolState={(newState:string) => {setToolstate((prev) => newState); setActive('')}}></Toolbar>\r\n            </div>\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Graph;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}