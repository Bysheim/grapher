{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\larsb\\\\Desktop\\\\knowit\\\\grapher\\\\src\\\\components\\\\Graph\\\\Graph.tsx\",\n  _s = $RefreshSig$();\nimport { useState } from \"react\";\nimport \"../../styles/Graph/Graph.css\";\nimport Canvas from \"../Canvas/Canvas\";\nimport def_graph from './default.json';\nimport InfoBoard from \"../InfoBoard/InfoBoard\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst generateID = (prefix, length) => {\n  const values = \"qwertyuiopasdfghjklzxcvbnmQWERTYUIOPASDFGHJKLZXCVBNM1234567890\";\n  var id = prefix + '-';\n  for (let i = 0; i < length; i++) {\n    let idx = Math.round(Math.random() * (values.length - 1));\n    id += values[idx];\n  }\n  return id;\n};\nconst Graph = props => {\n  _s();\n  const [graph, updateGraph] = useState(def_graph);\n  const [active, setActive] = useState(\"\");\n  const [hovered, setHoverd] = useState(\"\");\n  const [toolState, setToolstate] = useState(\"select\"); ///extract!!!!!!!!!!!\n\n  /**\r\n   * Create a new vertex at the given position.\r\n   * @param position \r\n   */\n  const newVertex = position => {\n    //Generate the new vertex with a unique id\n    const id = generateID('vertex', 5);\n    const vertex = {\n      edges: [],\n      position: position,\n      symbol: ''\n    };\n    updateGraph(prev => ({\n      ...prev,\n      vertices: {\n        ...prev.vertices,\n        [id]: vertex\n      }\n    }));\n    setActive(prev => id);\n  };\n\n  /**\r\n   * Create a new edge between the two given vertices. \r\n   * @param vertexA \r\n   * @param vertexB \r\n   * @returns\r\n   */\n  const newEdge = (vertexA, vertexB) => {\n    //make sure that both vertices exists\n    if (!(vertexA in graph.vertices && vertexB in graph.vertices)) return;\n\n    //make sure that the edge is between two different vertices (could be removed in the future)\n    if (vertexA == vertexB) return;\n    let double = false;\n\n    //make sure that this is a unique edge. Only one edge can exist between a given set of vertices AB if the graph is undirected. \n    if (Object.entries(graph.edges).map(edge => {\n      if (edge[1].vertices.b == vertexA && edge[1].vertices.a == vertexB) {\n        if (graph.directed) double = true;else return true;\n      }\n      return edge[1].vertices.a == vertexA && edge[1].vertices.b == vertexB;\n    }).some(val => val)) return;\n\n    //Generate the new edge with a unique id\n    const id = generateID('edge', 5);\n    const edge = {\n      vertices: {\n        a: vertexA,\n        b: vertexB\n      },\n      weight: 0,\n      double: double\n    };\n\n    //update the involved vertices to be maped to this new edge\n    const updateVerticies = {\n      ...graph.vertices\n    };\n    updateVerticies[vertexA] = {\n      ...updateVerticies[vertexA],\n      edges: [...updateVerticies[vertexA].edges, id]\n    };\n    updateVerticies[vertexB] = {\n      ...updateVerticies[vertexB],\n      edges: [...updateVerticies[vertexB].edges, id]\n    };\n    updateGraph(prev => ({\n      ...prev,\n      vertices: updateVerticies,\n      edges: {\n        ...prev.edges,\n        [id]: edge\n      }\n    }));\n    setActive(prev => id);\n  };\n  const removeVertex = id => {\n    //make sure that the id exists in the graph\n    if (!(id in graph.vertices)) return;\n    const updateVerticies = {\n      ...graph.vertices\n    };\n    const updateEdges = {\n      ...graph.edges\n    };\n    updateVerticies[id].edges.forEach(e => {\n      let va = updateEdges[e].vertices.a;\n      updateVerticies[va] = {\n        ...updateVerticies[va],\n        edges: updateVerticies[va].edges.filter(edge => edge !== e)\n      };\n      let vb = updateEdges[e].vertices.b;\n      updateVerticies[vb] = {\n        ...updateVerticies[vb],\n        edges: updateVerticies[vb].edges.filter(edge => edge !== e)\n      };\n      delete updateEdges[e];\n    });\n    delete updateVerticies[id];\n    updateGraph(prev => ({\n      ...prev,\n      edges: updateEdges,\n      vertices: updateVerticies\n    }));\n    setActive(prev => \"\");\n  };\n  const removeEdge = id => {\n    //make sure that the id exists in the graph\n    if (!(id in graph.edges)) return;\n    const updateVerticies = {\n      ...graph.vertices\n    };\n    const updateEdges = {\n      ...graph.edges\n    };\n    let va = updateEdges[id].vertices.a;\n    updateVerticies[va] = {\n      ...updateVerticies[va],\n      edges: updateVerticies[va].edges.filter(edge => edge !== id)\n    };\n    let vb = updateEdges[id].vertices.b;\n    updateVerticies[vb] = {\n      ...updateVerticies[vb],\n      edges: updateVerticies[vb].edges.filter(edge => edge !== id)\n    };\n    delete updateEdges[id];\n    updateGraph(prev => ({\n      ...prev,\n      edges: updateEdges,\n      vertices: updateVerticies\n    }));\n    setActive(prev => \"\");\n  };\n  const moveVertex = (id, newPosition) => {\n    const updateVerticies = {\n      ...graph.vertices\n    };\n    updateVerticies[id] = {\n      ...updateVerticies[id],\n      position: newPosition\n    };\n    updateGraph(prev => ({\n      ...prev,\n      vertices: updateVerticies\n    }));\n  };\n  const editWeight = (id, value) => {\n    const updateEdges = {\n      ...graph.edges\n    };\n    updateEdges[id] = {\n      ...updateEdges[id],\n      weight: value\n    };\n    updateGraph(prev => ({\n      ...prev,\n      edges: updateEdges\n    }));\n  };\n  const editLabel = (id, value) => {\n    const updateVerticies = {\n      ...graph.vertices\n    };\n    updateVerticies[id] = {\n      ...updateVerticies[id],\n      symbol: value\n    };\n    updateGraph(prev => ({\n      ...prev,\n      vertices: updateVerticies\n    }));\n  };\n  const changeActive = newActive => {\n    setActive(prev => newActive);\n    /*\r\n    if ( toolState == 'add' )\r\n    {\r\n        newEdge(active,newActive);\r\n    }\r\n    */\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"graph-container\",\n    children: [/*#__PURE__*/_jsxDEV(Canvas, {\n      graph: graph,\n      grafEdit: {\n        newVertex: newVertex,\n        deleteVertex: removeVertex,\n        newEdge: newEdge,\n        deleteEdge: removeEdge,\n        moveVertex: moveVertex\n      },\n      active: active,\n      setActive: changeActive,\n      hovered: hovered,\n      setHoverd: setHoverd\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 189,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        position: 'absolute',\n        color: 'white'\n      },\n      onChange: () => setActive(\"\"),\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"checkbox\",\n          checked: graph.directed,\n          onChange: () => updateGraph(prev => ({\n            ...prev,\n            directed: !prev.directed\n          }))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 205,\n          columnNumber: 17\n        }, this), \"Directed\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 204,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"checkbox\",\n          checked: graph.weighted,\n          onChange: () => updateGraph(prev => ({\n            ...prev,\n            weighted: !prev.weighted\n          }))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 209,\n          columnNumber: 17\n        }, this), \"Weighted\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 208,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 203,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        className: \"container\",\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          id: \"select\",\n          type: \"radio\",\n          name: \"radio\",\n          checked: toolState == 'select',\n          onChange: e => setToolstate(prev => 'select')\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 216,\n          columnNumber: 21\n        }, this), \"Select\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 215,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        className: \"container\",\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          id: \"add\",\n          type: \"radio\",\n          name: \"radio\",\n          checked: toolState == 'add',\n          onChange: e => setToolstate(prev => 'add')\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 220,\n          columnNumber: 21\n        }, this), \"Add\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 219,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        className: \"container\",\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          id: \"delete\",\n          type: \"radio\",\n          name: \"radio\",\n          checked: toolState == 'delete',\n          onChange: e => setToolstate(prev => 'delete')\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 224,\n          columnNumber: 21\n        }, this), \"Delete\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 223,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 214,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(InfoBoard, {\n      graph: graph,\n      active: active,\n      setActive: setActive,\n      setHovered: setHoverd,\n      editWeight: editWeight,\n      editLabel: editLabel\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 230,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 188,\n    columnNumber: 9\n  }, this);\n};\n_s(Graph, \"zpkjkafBhnquw7+AVcdQMzqrtj8=\");\n_c = Graph;\nexport default Graph;\nvar _c;\n$RefreshReg$(_c, \"Graph\");","map":{"version":3,"names":["useState","Canvas","def_graph","InfoBoard","jsxDEV","_jsxDEV","generateID","prefix","length","values","id","i","idx","Math","round","random","Graph","props","_s","graph","updateGraph","active","setActive","hovered","setHoverd","toolState","setToolstate","newVertex","position","vertex","edges","symbol","prev","vertices","newEdge","vertexA","vertexB","double","Object","entries","map","edge","b","a","directed","some","val","weight","updateVerticies","removeVertex","updateEdges","forEach","e","va","filter","vb","removeEdge","moveVertex","newPosition","editWeight","value","editLabel","changeActive","newActive","className","children","grafEdit","deleteVertex","deleteEdge","fileName","_jsxFileName","lineNumber","columnNumber","style","color","onChange","type","checked","weighted","name","setHovered","_c","$RefreshReg$"],"sources":["C:/Users/larsb/Desktop/knowit/grapher/src/components/Graph/Graph.tsx"],"sourcesContent":["import { MouseEvent, ReactNode, useCallback, useEffect, useRef, useState } from \"react\";\r\nimport \"../../styles/Graph/Graph.css\";\r\nimport Canvas from \"../Canvas/Canvas\";\r\n\r\nimport def_graph from './default.json';\r\nimport InfoBoard from \"../InfoBoard/InfoBoard\";\r\n\r\ninterface IVertex {\r\n    edges : string[]\r\n    position : {x: number, y: number},\r\n    symbol: string\r\n}\r\n\r\ninterface IEdge {\r\n    vertices : {a: string, b: string},\r\n    weight : number,\r\n    double : boolean,\r\n}\r\n\r\nexport interface IGraph {\r\n    weighted : boolean,\r\n    directed : boolean,\r\n    vertices : { [id: string] : IVertex },\r\n    edges : { [id: string] : IEdge }\r\n}\r\n\r\ninterface Props {\r\n\r\n}\r\n\r\nconst generateID = (prefix: string, length: number) => {\r\n    const values = \"qwertyuiopasdfghjklzxcvbnmQWERTYUIOPASDFGHJKLZXCVBNM1234567890\";\r\n    var id = prefix + '-';\r\n    for (let i = 0; i < length; i++) {\r\n        let idx = Math.round(Math.random() * (values.length-1));\r\n        id += values[idx];\r\n    }\r\n    return id;\r\n}\r\n\r\n\r\nconst Graph = (props: Props) => {\r\n\r\n    const [graph, updateGraph] = useState<IGraph>(def_graph);\r\n    const [active, setActive] = useState<string>(\"\");\r\n    const [hovered, setHoverd] = useState<string>(\"\");\r\n\r\n\r\n    const [toolState, setToolstate] = useState<string>(\"select\");   ///extract!!!!!!!!!!!\r\n\r\n    /**\r\n     * Create a new vertex at the given position.\r\n     * @param position \r\n     */\r\n    const newVertex = (position:{x:number,y:number}) => {\r\n        //Generate the new vertex with a unique id\r\n        const id = generateID('vertex',5);\r\n        const vertex : IVertex = {\r\n            edges : [],\r\n            position : position,\r\n            symbol: ''\r\n        }\r\n\r\n        updateGraph((prev: IGraph) => ({...prev, vertices : {...prev.vertices, [id] : vertex}}))\r\n        setActive((prev) => id);\r\n    }\r\n    \r\n    /**\r\n     * Create a new edge between the two given vertices. \r\n     * @param vertexA \r\n     * @param vertexB \r\n     * @returns\r\n     */\r\n    const newEdge = (vertexA : string, vertexB : string) => {\r\n\r\n        //make sure that both vertices exists\r\n        if (!(vertexA in graph.vertices && vertexB in graph.vertices)) return\r\n     \r\n        //make sure that the edge is between two different vertices (could be removed in the future)\r\n        if ( vertexA == vertexB ) return;\r\n\r\n        let double = false;\r\n\r\n        //make sure that this is a unique edge. Only one edge can exist between a given set of vertices AB if the graph is undirected. \r\n        if ( Object.entries(graph.edges).map(edge => {\r\n            if ( edge[1].vertices.b == vertexA && edge[1].vertices.a == vertexB ) {\r\n                if (graph.directed) double = true;\r\n                else return true;\r\n            }\r\n            return (edge[1].vertices.a == vertexA && edge[1].vertices.b == vertexB);\r\n        }).some(val => val)) return;\r\n\r\n        //Generate the new edge with a unique id\r\n        const id = generateID('edge',5);\r\n        const edge : IEdge = {\r\n            vertices : {a: vertexA, b: vertexB},\r\n            weight : 0,\r\n            double : double\r\n        }\r\n\r\n        //update the involved vertices to be maped to this new edge\r\n        const updateVerticies = {...graph.vertices};     \r\n        updateVerticies[vertexA] = {...updateVerticies[vertexA], edges :  [...updateVerticies[vertexA].edges, id]}\r\n        updateVerticies[vertexB] = {...updateVerticies[vertexB], edges :  [...updateVerticies[vertexB].edges, id]}\r\n\r\n        updateGraph((prev: IGraph) => ({...prev, vertices: updateVerticies, edges : {...prev.edges, [id] : edge}}))\r\n        setActive((prev) => id);\r\n    }\r\n\r\n\r\n    const removeVertex = (id : string) => {\r\n        //make sure that the id exists in the graph\r\n        if (!(id in graph.vertices)) return;\r\n\r\n        const updateVerticies = {...graph.vertices};\r\n        const updateEdges = {...graph.edges};\r\n\r\n        updateVerticies[id].edges.forEach(e => {\r\n\r\n            let va = updateEdges[e].vertices.a;\r\n            updateVerticies[va] = {...updateVerticies[va], edges :  updateVerticies[va].edges.filter(edge => edge !== e)};\r\n            \r\n            let vb = updateEdges[e].vertices.b;\r\n            updateVerticies[vb] = {...updateVerticies[vb], edges :  updateVerticies[vb].edges.filter(edge => edge !== e)};\r\n\r\n\r\n            delete updateEdges[e];\r\n        });\r\n    \r\n        delete updateVerticies[id];\r\n\r\n        updateGraph((prev: IGraph) => ({...prev, edges : updateEdges, vertices : updateVerticies}))\r\n        setActive((prev) => \"\");\r\n    }\r\n\r\n    const removeEdge = (id : string) => {\r\n        //make sure that the id exists in the graph\r\n        if (!(id in graph.edges)) return;\r\n\r\n        const updateVerticies = {...graph.vertices};\r\n        const updateEdges = {...graph.edges};\r\n\r\n        let va = updateEdges[id].vertices.a\r\n        updateVerticies[va] = {...updateVerticies[va], edges :updateVerticies[va].edges.filter(edge => edge !== id)}\r\n        let vb = updateEdges[id].vertices.b\r\n        updateVerticies[vb] = {...updateVerticies[vb], edges :updateVerticies[vb].edges.filter(edge => edge !== id)}\r\n        \r\n        delete updateEdges[id];\r\n\r\n        updateGraph((prev: IGraph) => ({...prev, edges : updateEdges, vertices : updateVerticies}))\r\n        setActive((prev) => \"\");\r\n    }\r\n\r\n\r\n    const moveVertex = (id: string, newPosition: {x: number, y: number}) => {\r\n        const updateVerticies = {...graph.vertices};     \r\n        updateVerticies[id] = {...updateVerticies[id], position :  newPosition}\r\n\r\n        updateGraph((prev: IGraph) => ({...prev, vertices : updateVerticies}))\r\n    }\r\n\r\n    const editWeight = (id: string, value: number) => {    \r\n        const updateEdges = {...graph.edges};\r\n        updateEdges[id] = {...updateEdges[id], weight : value};\r\n\r\n        updateGraph((prev: IGraph) => ({...prev, edges : updateEdges}))\r\n    }\r\n\r\n    const editLabel = (id: string, value: string) => {    \r\n        const updateVerticies = {...graph.vertices};     \r\n        updateVerticies[id] = {...updateVerticies[id], symbol :  value}\r\n\r\n        updateGraph((prev: IGraph) => ({...prev, vertices : updateVerticies}))\r\n    }\r\n\r\n    const changeActive = (newActive : string) => {\r\n        \r\n        setActive((prev) => newActive);\r\n        /*\r\n        if ( toolState == 'add' )\r\n        {\r\n            newEdge(active,newActive);\r\n        }\r\n        */\r\n    }\r\n\r\n    return (\r\n        <div className=\"graph-container\">\r\n            <Canvas \r\n                graph={graph}\r\n                grafEdit={{ \r\n                    newVertex: newVertex,\r\n                    deleteVertex: removeVertex,\r\n                    newEdge: newEdge,\r\n                    deleteEdge: removeEdge,\r\n                    moveVertex: moveVertex \r\n                }}\r\n                active={active}\r\n                setActive={changeActive}\r\n                hovered={hovered}\r\n                setHoverd={setHoverd}></Canvas>\r\n\r\n            <div style={{position:'absolute', color:'white'}} onChange={() => setActive(\"\")}>\r\n            <label>\r\n                <input type=\"checkbox\" checked={graph.directed} onChange={() => updateGraph((prev: IGraph) => ({...prev, directed : !prev.directed}))}/>\r\n                Directed\r\n            </label>\r\n            <label>\r\n                <input type=\"checkbox\" checked={graph.weighted} onChange={() => updateGraph((prev: IGraph) => ({...prev, weighted : !prev.weighted}))}/>\r\n                Weighted\r\n            </label>\r\n            </div>\r\n            \r\n            <div>\r\n                <label className=\"container\">\r\n                    <input id=\"select\" type=\"radio\" name=\"radio\" checked={toolState == 'select'} onChange={(e) => setToolstate((prev) => 'select')}/>\r\n                    Select\r\n                </label>\r\n                <label className=\"container\">\r\n                    <input id=\"add\" type=\"radio\" name=\"radio\" checked={toolState == 'add'} onChange={(e) => setToolstate((prev) => 'add')}/>\r\n                    Add\r\n                </label>\r\n                <label className=\"container\">\r\n                    <input id=\"delete\" type=\"radio\" name=\"radio\" checked={toolState == 'delete'} onChange={(e) => setToolstate((prev) => 'delete')}/>\r\n                    Delete\r\n                </label>\r\n            </div>\r\n\r\n\r\n            <InfoBoard \r\n                graph={graph} \r\n                active={active}\r\n                setActive={setActive}\r\n                setHovered={setHoverd}\r\n                editWeight={editWeight}\r\n                editLabel={editLabel}>\r\n            </InfoBoard>\r\n\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Graph;"],"mappings":";;AAAA,SAAgEA,QAAQ,QAAQ,OAAO;AACvF,OAAO,8BAA8B;AACrC,OAAOC,MAAM,MAAM,kBAAkB;AAErC,OAAOC,SAAS,MAAM,gBAAgB;AACtC,OAAOC,SAAS,MAAM,wBAAwB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAyB/C,MAAMC,UAAU,GAAGA,CAACC,MAAc,EAAEC,MAAc,KAAK;EACnD,MAAMC,MAAM,GAAG,gEAAgE;EAC/E,IAAIC,EAAE,GAAGH,MAAM,GAAG,GAAG;EACrB,KAAK,IAAII,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGH,MAAM,EAAEG,CAAC,EAAE,EAAE;IAC7B,IAAIC,GAAG,GAAGC,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,MAAM,CAAC,CAAC,IAAIN,MAAM,CAACD,MAAM,GAAC,CAAC,CAAC,CAAC;IACvDE,EAAE,IAAID,MAAM,CAACG,GAAG,CAAC;EACrB;EACA,OAAOF,EAAE;AACb,CAAC;AAGD,MAAMM,KAAK,GAAIC,KAAY,IAAK;EAAAC,EAAA;EAE5B,MAAM,CAACC,KAAK,EAAEC,WAAW,CAAC,GAAGpB,QAAQ,CAASE,SAAS,CAAC;EACxD,MAAM,CAACmB,MAAM,EAAEC,SAAS,CAAC,GAAGtB,QAAQ,CAAS,EAAE,CAAC;EAChD,MAAM,CAACuB,OAAO,EAAEC,SAAS,CAAC,GAAGxB,QAAQ,CAAS,EAAE,CAAC;EAGjD,MAAM,CAACyB,SAAS,EAAEC,YAAY,CAAC,GAAG1B,QAAQ,CAAS,QAAQ,CAAC,CAAC,CAAG;;EAEhE;AACJ;AACA;AACA;EACI,MAAM2B,SAAS,GAAIC,QAA4B,IAAK;IAChD;IACA,MAAMlB,EAAE,GAAGJ,UAAU,CAAC,QAAQ,EAAC,CAAC,CAAC;IACjC,MAAMuB,MAAgB,GAAG;MACrBC,KAAK,EAAG,EAAE;MACVF,QAAQ,EAAGA,QAAQ;MACnBG,MAAM,EAAE;IACZ,CAAC;IAEDX,WAAW,CAAEY,IAAY,KAAM;MAAC,GAAGA,IAAI;MAAEC,QAAQ,EAAG;QAAC,GAAGD,IAAI,CAACC,QAAQ;QAAE,CAACvB,EAAE,GAAImB;MAAM;IAAC,CAAC,CAAC,CAAC;IACxFP,SAAS,CAAEU,IAAI,IAAKtB,EAAE,CAAC;EAC3B,CAAC;;EAED;AACJ;AACA;AACA;AACA;AACA;EACI,MAAMwB,OAAO,GAAGA,CAACC,OAAgB,EAAEC,OAAgB,KAAK;IAEpD;IACA,IAAI,EAAED,OAAO,IAAIhB,KAAK,CAACc,QAAQ,IAAIG,OAAO,IAAIjB,KAAK,CAACc,QAAQ,CAAC,EAAE;;IAE/D;IACA,IAAKE,OAAO,IAAIC,OAAO,EAAG;IAE1B,IAAIC,MAAM,GAAG,KAAK;;IAElB;IACA,IAAKC,MAAM,CAACC,OAAO,CAACpB,KAAK,CAACW,KAAK,CAAC,CAACU,GAAG,CAACC,IAAI,IAAI;MACzC,IAAKA,IAAI,CAAC,CAAC,CAAC,CAACR,QAAQ,CAACS,CAAC,IAAIP,OAAO,IAAIM,IAAI,CAAC,CAAC,CAAC,CAACR,QAAQ,CAACU,CAAC,IAAIP,OAAO,EAAG;QAClE,IAAIjB,KAAK,CAACyB,QAAQ,EAAEP,MAAM,GAAG,IAAI,CAAC,KAC7B,OAAO,IAAI;MACpB;MACA,OAAQI,IAAI,CAAC,CAAC,CAAC,CAACR,QAAQ,CAACU,CAAC,IAAIR,OAAO,IAAIM,IAAI,CAAC,CAAC,CAAC,CAACR,QAAQ,CAACS,CAAC,IAAIN,OAAO;IAC1E,CAAC,CAAC,CAACS,IAAI,CAACC,GAAG,IAAIA,GAAG,CAAC,EAAE;;IAErB;IACA,MAAMpC,EAAE,GAAGJ,UAAU,CAAC,MAAM,EAAC,CAAC,CAAC;IAC/B,MAAMmC,IAAY,GAAG;MACjBR,QAAQ,EAAG;QAACU,CAAC,EAAER,OAAO;QAAEO,CAAC,EAAEN;MAAO,CAAC;MACnCW,MAAM,EAAG,CAAC;MACVV,MAAM,EAAGA;IACb,CAAC;;IAED;IACA,MAAMW,eAAe,GAAG;MAAC,GAAG7B,KAAK,CAACc;IAAQ,CAAC;IAC3Ce,eAAe,CAACb,OAAO,CAAC,GAAG;MAAC,GAAGa,eAAe,CAACb,OAAO,CAAC;MAAEL,KAAK,EAAI,CAAC,GAAGkB,eAAe,CAACb,OAAO,CAAC,CAACL,KAAK,EAAEpB,EAAE;IAAC,CAAC;IAC1GsC,eAAe,CAACZ,OAAO,CAAC,GAAG;MAAC,GAAGY,eAAe,CAACZ,OAAO,CAAC;MAAEN,KAAK,EAAI,CAAC,GAAGkB,eAAe,CAACZ,OAAO,CAAC,CAACN,KAAK,EAAEpB,EAAE;IAAC,CAAC;IAE1GU,WAAW,CAAEY,IAAY,KAAM;MAAC,GAAGA,IAAI;MAAEC,QAAQ,EAAEe,eAAe;MAAElB,KAAK,EAAG;QAAC,GAAGE,IAAI,CAACF,KAAK;QAAE,CAACpB,EAAE,GAAI+B;MAAI;IAAC,CAAC,CAAC,CAAC;IAC3GnB,SAAS,CAAEU,IAAI,IAAKtB,EAAE,CAAC;EAC3B,CAAC;EAGD,MAAMuC,YAAY,GAAIvC,EAAW,IAAK;IAClC;IACA,IAAI,EAAEA,EAAE,IAAIS,KAAK,CAACc,QAAQ,CAAC,EAAE;IAE7B,MAAMe,eAAe,GAAG;MAAC,GAAG7B,KAAK,CAACc;IAAQ,CAAC;IAC3C,MAAMiB,WAAW,GAAG;MAAC,GAAG/B,KAAK,CAACW;IAAK,CAAC;IAEpCkB,eAAe,CAACtC,EAAE,CAAC,CAACoB,KAAK,CAACqB,OAAO,CAACC,CAAC,IAAI;MAEnC,IAAIC,EAAE,GAAGH,WAAW,CAACE,CAAC,CAAC,CAACnB,QAAQ,CAACU,CAAC;MAClCK,eAAe,CAACK,EAAE,CAAC,GAAG;QAAC,GAAGL,eAAe,CAACK,EAAE,CAAC;QAAEvB,KAAK,EAAIkB,eAAe,CAACK,EAAE,CAAC,CAACvB,KAAK,CAACwB,MAAM,CAACb,IAAI,IAAIA,IAAI,KAAKW,CAAC;MAAC,CAAC;MAE7G,IAAIG,EAAE,GAAGL,WAAW,CAACE,CAAC,CAAC,CAACnB,QAAQ,CAACS,CAAC;MAClCM,eAAe,CAACO,EAAE,CAAC,GAAG;QAAC,GAAGP,eAAe,CAACO,EAAE,CAAC;QAAEzB,KAAK,EAAIkB,eAAe,CAACO,EAAE,CAAC,CAACzB,KAAK,CAACwB,MAAM,CAACb,IAAI,IAAIA,IAAI,KAAKW,CAAC;MAAC,CAAC;MAG7G,OAAOF,WAAW,CAACE,CAAC,CAAC;IACzB,CAAC,CAAC;IAEF,OAAOJ,eAAe,CAACtC,EAAE,CAAC;IAE1BU,WAAW,CAAEY,IAAY,KAAM;MAAC,GAAGA,IAAI;MAAEF,KAAK,EAAGoB,WAAW;MAAEjB,QAAQ,EAAGe;IAAe,CAAC,CAAC,CAAC;IAC3F1B,SAAS,CAAEU,IAAI,IAAK,EAAE,CAAC;EAC3B,CAAC;EAED,MAAMwB,UAAU,GAAI9C,EAAW,IAAK;IAChC;IACA,IAAI,EAAEA,EAAE,IAAIS,KAAK,CAACW,KAAK,CAAC,EAAE;IAE1B,MAAMkB,eAAe,GAAG;MAAC,GAAG7B,KAAK,CAACc;IAAQ,CAAC;IAC3C,MAAMiB,WAAW,GAAG;MAAC,GAAG/B,KAAK,CAACW;IAAK,CAAC;IAEpC,IAAIuB,EAAE,GAAGH,WAAW,CAACxC,EAAE,CAAC,CAACuB,QAAQ,CAACU,CAAC;IACnCK,eAAe,CAACK,EAAE,CAAC,GAAG;MAAC,GAAGL,eAAe,CAACK,EAAE,CAAC;MAAEvB,KAAK,EAAEkB,eAAe,CAACK,EAAE,CAAC,CAACvB,KAAK,CAACwB,MAAM,CAACb,IAAI,IAAIA,IAAI,KAAK/B,EAAE;IAAC,CAAC;IAC5G,IAAI6C,EAAE,GAAGL,WAAW,CAACxC,EAAE,CAAC,CAACuB,QAAQ,CAACS,CAAC;IACnCM,eAAe,CAACO,EAAE,CAAC,GAAG;MAAC,GAAGP,eAAe,CAACO,EAAE,CAAC;MAAEzB,KAAK,EAAEkB,eAAe,CAACO,EAAE,CAAC,CAACzB,KAAK,CAACwB,MAAM,CAACb,IAAI,IAAIA,IAAI,KAAK/B,EAAE;IAAC,CAAC;IAE5G,OAAOwC,WAAW,CAACxC,EAAE,CAAC;IAEtBU,WAAW,CAAEY,IAAY,KAAM;MAAC,GAAGA,IAAI;MAAEF,KAAK,EAAGoB,WAAW;MAAEjB,QAAQ,EAAGe;IAAe,CAAC,CAAC,CAAC;IAC3F1B,SAAS,CAAEU,IAAI,IAAK,EAAE,CAAC;EAC3B,CAAC;EAGD,MAAMyB,UAAU,GAAGA,CAAC/C,EAAU,EAAEgD,WAAmC,KAAK;IACpE,MAAMV,eAAe,GAAG;MAAC,GAAG7B,KAAK,CAACc;IAAQ,CAAC;IAC3Ce,eAAe,CAACtC,EAAE,CAAC,GAAG;MAAC,GAAGsC,eAAe,CAACtC,EAAE,CAAC;MAAEkB,QAAQ,EAAI8B;IAAW,CAAC;IAEvEtC,WAAW,CAAEY,IAAY,KAAM;MAAC,GAAGA,IAAI;MAAEC,QAAQ,EAAGe;IAAe,CAAC,CAAC,CAAC;EAC1E,CAAC;EAED,MAAMW,UAAU,GAAGA,CAACjD,EAAU,EAAEkD,KAAa,KAAK;IAC9C,MAAMV,WAAW,GAAG;MAAC,GAAG/B,KAAK,CAACW;IAAK,CAAC;IACpCoB,WAAW,CAACxC,EAAE,CAAC,GAAG;MAAC,GAAGwC,WAAW,CAACxC,EAAE,CAAC;MAAEqC,MAAM,EAAGa;IAAK,CAAC;IAEtDxC,WAAW,CAAEY,IAAY,KAAM;MAAC,GAAGA,IAAI;MAAEF,KAAK,EAAGoB;IAAW,CAAC,CAAC,CAAC;EACnE,CAAC;EAED,MAAMW,SAAS,GAAGA,CAACnD,EAAU,EAAEkD,KAAa,KAAK;IAC7C,MAAMZ,eAAe,GAAG;MAAC,GAAG7B,KAAK,CAACc;IAAQ,CAAC;IAC3Ce,eAAe,CAACtC,EAAE,CAAC,GAAG;MAAC,GAAGsC,eAAe,CAACtC,EAAE,CAAC;MAAEqB,MAAM,EAAI6B;IAAK,CAAC;IAE/DxC,WAAW,CAAEY,IAAY,KAAM;MAAC,GAAGA,IAAI;MAAEC,QAAQ,EAAGe;IAAe,CAAC,CAAC,CAAC;EAC1E,CAAC;EAED,MAAMc,YAAY,GAAIC,SAAkB,IAAK;IAEzCzC,SAAS,CAAEU,IAAI,IAAK+B,SAAS,CAAC;IAC9B;AACR;AACA;AACA;AACA;AACA;EACI,CAAC;;EAED,oBACI1D,OAAA;IAAK2D,SAAS,EAAC,iBAAiB;IAAAC,QAAA,gBAC5B5D,OAAA,CAACJ,MAAM;MACHkB,KAAK,EAAEA,KAAM;MACb+C,QAAQ,EAAE;QACNvC,SAAS,EAAEA,SAAS;QACpBwC,YAAY,EAAElB,YAAY;QAC1Bf,OAAO,EAAEA,OAAO;QAChBkC,UAAU,EAAEZ,UAAU;QACtBC,UAAU,EAAEA;MAChB,CAAE;MACFpC,MAAM,EAAEA,MAAO;MACfC,SAAS,EAAEwC,YAAa;MACxBvC,OAAO,EAAEA,OAAQ;MACjBC,SAAS,EAAEA;IAAU;MAAA6C,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAS,CAAC,eAEnCnE,OAAA;MAAKoE,KAAK,EAAE;QAAC7C,QAAQ,EAAC,UAAU;QAAE8C,KAAK,EAAC;MAAO,CAAE;MAACC,QAAQ,EAAEA,CAAA,KAAMrD,SAAS,CAAC,EAAE,CAAE;MAAA2C,QAAA,gBAChF5D,OAAA;QAAA4D,QAAA,gBACI5D,OAAA;UAAOuE,IAAI,EAAC,UAAU;UAACC,OAAO,EAAE1D,KAAK,CAACyB,QAAS;UAAC+B,QAAQ,EAAEA,CAAA,KAAMvD,WAAW,CAAEY,IAAY,KAAM;YAAC,GAAGA,IAAI;YAAEY,QAAQ,EAAG,CAACZ,IAAI,CAACY;UAAQ,CAAC,CAAC;QAAE;UAAAyB,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAC,CAAC,YAE5I;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAO,CAAC,eACRnE,OAAA;QAAA4D,QAAA,gBACI5D,OAAA;UAAOuE,IAAI,EAAC,UAAU;UAACC,OAAO,EAAE1D,KAAK,CAAC2D,QAAS;UAACH,QAAQ,EAAEA,CAAA,KAAMvD,WAAW,CAAEY,IAAY,KAAM;YAAC,GAAGA,IAAI;YAAE8C,QAAQ,EAAG,CAAC9C,IAAI,CAAC8C;UAAQ,CAAC,CAAC;QAAE;UAAAT,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAC,CAAC,YAE5I;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAO,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACH,CAAC,eAENnE,OAAA;MAAA4D,QAAA,gBACI5D,OAAA;QAAO2D,SAAS,EAAC,WAAW;QAAAC,QAAA,gBACxB5D,OAAA;UAAOK,EAAE,EAAC,QAAQ;UAACkE,IAAI,EAAC,OAAO;UAACG,IAAI,EAAC,OAAO;UAACF,OAAO,EAAEpD,SAAS,IAAI,QAAS;UAACkD,QAAQ,EAAGvB,CAAC,IAAK1B,YAAY,CAAEM,IAAI,IAAK,QAAQ;QAAE;UAAAqC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAC,CAAC,UAErI;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAO,CAAC,eACRnE,OAAA;QAAO2D,SAAS,EAAC,WAAW;QAAAC,QAAA,gBACxB5D,OAAA;UAAOK,EAAE,EAAC,KAAK;UAACkE,IAAI,EAAC,OAAO;UAACG,IAAI,EAAC,OAAO;UAACF,OAAO,EAAEpD,SAAS,IAAI,KAAM;UAACkD,QAAQ,EAAGvB,CAAC,IAAK1B,YAAY,CAAEM,IAAI,IAAK,KAAK;QAAE;UAAAqC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAC,CAAC,OAE5H;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAO,CAAC,eACRnE,OAAA;QAAO2D,SAAS,EAAC,WAAW;QAAAC,QAAA,gBACxB5D,OAAA;UAAOK,EAAE,EAAC,QAAQ;UAACkE,IAAI,EAAC,OAAO;UAACG,IAAI,EAAC,OAAO;UAACF,OAAO,EAAEpD,SAAS,IAAI,QAAS;UAACkD,QAAQ,EAAGvB,CAAC,IAAK1B,YAAY,CAAEM,IAAI,IAAK,QAAQ;QAAE;UAAAqC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAC,CAAC,UAErI;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAO,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACP,CAAC,eAGNnE,OAAA,CAACF,SAAS;MACNgB,KAAK,EAAEA,KAAM;MACbE,MAAM,EAAEA,MAAO;MACfC,SAAS,EAAEA,SAAU;MACrB0D,UAAU,EAAExD,SAAU;MACtBmC,UAAU,EAAEA,UAAW;MACvBE,SAAS,EAAEA;IAAU;MAAAQ,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACd,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAEX,CAAC;AAEd,CAAC;AAACtD,EAAA,CAvMIF,KAAK;AAAAiE,EAAA,GAALjE,KAAK;AAyMX,eAAeA,KAAK;AAAC,IAAAiE,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}