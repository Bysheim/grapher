{"ast":null,"code":"var _jsxFileName = \"/home/lby005/Desktop/prodj/grapher/src/components/Graph/Graph.tsx\",\n  _s = $RefreshSig$();\nimport { useEffect, useState } from \"react\";\nimport \"../../styles/Canvas/Canvas.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst generateID = (prefix, length) => {\n  const values = \"qwertyuiopasdfghjklzxcvbnmQWERTYUIOPASDFGHJKLZXCVBNM1234567890\";\n  var id = prefix + '-';\n  for (let i = 0; i < length; i++) {\n    let idx = Math.round(Math.random() * (values.length - 1));\n    id += values[idx];\n  }\n  return id;\n};\nconst Graph = props => {\n  _s();\n  const [graph, updateGraph] = useState({\n    vertices: [{\n      id: \"a\",\n      edges: [],\n      position: {\n        x: 100,\n        y: 50\n      },\n      radius: 30\n    }, {\n      id: \"b\",\n      edges: [],\n      position: {\n        x: 10,\n        y: 500\n      },\n      radius: 31\n    }],\n    edges: []\n  });\n\n  /**\n   * Create a new vertex at the given position.\n   * @param position \n   */\n  const newVertex = position => {\n    //Generate the new vertex with a unique id\n    const id = generateID('vertex', 5);\n    const vertex = {\n      id: id,\n      edges: [],\n      position: position,\n      radius: 30\n    };\n    updateGraph(prev => ({\n      ...prev,\n      vertices: [...prev.vertices, vertex]\n    }));\n  };\n\n  /**\n   * Create a new edge between the two given vertices. \n   * @param vertexA \n   * @param vertexB \n   * @returns\n   */\n  const newEdge = (vertexA, vertexB) => {\n    //make sure that the edge is between two different vertices (could be removed in the future)\n    if (vertexA == vertexB) return;\n\n    //make sure that this is a unique edge, for now only one edge can exist between a given set of vertices AB. \n    if (graph.edges.map(edge => {\n      return edge.vertices.a == vertexA && edge.vertices.b == vertexB || edge.vertices.b == vertexA && edge.vertices.a == vertexB;\n    }).some(val => val)) return;\n\n    //Generate the new edge with a unique id\n    const id = generateID('edge', 5);\n    const edge = {\n      id: id,\n      vertices: {\n        a: vertexA,\n        b: vertexB\n      },\n      weight: 0\n    };\n\n    //update the involved vertices to be maped to this new edge\n    const updateVerticies = graph.vertices.map(vertex => {\n      if (vertex.id == vertexA || vertex.id == vertexB) {\n        return {\n          ...vertex,\n          edges: [...vertex.edges, id]\n        };\n      }\n      return vertex;\n    });\n    updateGraph(prev => ({\n      vertices: updateVerticies,\n      edges: [...prev.edges, edge]\n    }));\n  };\n  const removeVertex = () => {};\n  const removeEdge = () => {};\n  useEffect(() => {\n    console.log(graph);\n  }, [graph]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      width: 100,\n      height: 100,\n      backgroundColor: 'red'\n    },\n    onClick: () => newVertex({\n      x: 10,\n      y: 10\n    })\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 129,\n    columnNumber: 9\n  }, this);\n};\n_s(Graph, \"5Wy/wMsN8KwMypCEIqeY9W9SWGo=\");\n_c = Graph;\nexport default Graph;\nvar _c;\n$RefreshReg$(_c, \"Graph\");","map":{"version":3,"names":["useEffect","useState","jsxDEV","_jsxDEV","generateID","prefix","length","values","id","i","idx","Math","round","random","Graph","props","_s","graph","updateGraph","vertices","edges","position","x","y","radius","newVertex","vertex","prev","newEdge","vertexA","vertexB","map","edge","a","b","some","val","weight","updateVerticies","removeVertex","removeEdge","console","log","style","width","height","backgroundColor","onClick","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/home/lby005/Desktop/prodj/grapher/src/components/Graph/Graph.tsx"],"sourcesContent":["import { MouseEvent, ReactNode, useCallback, useEffect, useRef, useState } from \"react\";\nimport \"../../styles/Canvas/Canvas.css\";\n\ninterface IVertex {\n    id : string\n    edges : string[]\n    position : {x: number, y: number},\n    radius : number,\n}\n\ninterface IEdge {\n    id : string\n    vertices : {a: string, b: string}\n    weight : number\n}\n\ninterface IGraph {\n    vertices : IVertex[],\n    edges : IEdge[]\n}\n\ninterface Props {\n\n}\n\nconst generateID = (prefix: string, length: number) => {\n    const values = \"qwertyuiopasdfghjklzxcvbnmQWERTYUIOPASDFGHJKLZXCVBNM1234567890\";\n    var id = prefix + '-';\n    for (let i = 0; i < length; i++) {\n        let idx = Math.round(Math.random() * (values.length-1));\n        id += values[idx];\n    }\n    return id;\n}\n\n\nconst Graph = (props: Props) => {\n\n    const [graph, updateGraph] = useState<IGraph>({vertices: [\n        {\n            id : \"a\",\n            edges: [],\n            position : {x: 100, y: 50},\n            radius: 30\n        },\n        {\n            id : \"b\",\n            edges: [],\n            position : {x: 10, y: 500},\n            radius: 31\n        }\n    ], edges: []})\n\n\n    /**\n     * Create a new vertex at the given position.\n     * @param position \n     */\n    const newVertex = (position:{x:number,y:number}) => {\n        //Generate the new vertex with a unique id\n        const id = generateID('vertex',5);\n        const vertex : IVertex = {\n            id : id,\n            edges : [],\n            position : position,\n            radius : 30,\n        }\n\n        updateGraph((prev: IGraph) => ({...prev, vertices : [...prev.vertices, vertex]}))\n    }\n\n    /**\n     * Create a new edge between the two given vertices. \n     * @param vertexA \n     * @param vertexB \n     * @returns\n     */\n    const newEdge = (vertexA : string, vertexB : string) => {\n\n        //make sure that the edge is between two different vertices (could be removed in the future)\n        if ( vertexA == vertexB ) return;\n\n        //make sure that this is a unique edge, for now only one edge can exist between a given set of vertices AB. \n        if ( graph.edges.map(edge => {\n            return (edge.vertices.a == vertexA && edge.vertices.b == vertexB) || (edge.vertices.b == vertexA && edge.vertices.a == vertexB);\n        }).some(val => val)) return;\n\n        //Generate the new edge with a unique id\n        const id = generateID('edge',5);\n        const edge : IEdge = {\n            id : id,\n            vertices : {a: vertexA, b: vertexB},\n            weight : 0,\n        }\n\n        //update the involved vertices to be maped to this new edge\n        const updateVerticies = graph.vertices.map(vertex => {\n            if ( vertex.id == vertexA || vertex.id == vertexB ){\n                return {\n                    ...vertex,\n                    edges : [...vertex.edges, id]\n                }\n            }\n            return vertex;\n        })\n\n        updateGraph((prev: IGraph) => ({vertices: updateVerticies, edges : [...prev.edges, edge]}))\n    \n    }\n\n\n    const removeVertex = () => {\n\n    }\n\n    const removeEdge = () => {\n\n    }\n\n\n    useEffect(() => {\n        console.log(graph);\n    },[graph])\n\n\n\n\n    return (\n        <div style={{width:100,height:100,backgroundColor:'red'}} onClick={() => newVertex({x: 10, y: 10})}>\n    \n\n\n        </div>\n    );\n};\n\nexport default Graph;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}