{"ast":null,"code":"var _jsxFileName = \"/home/lby005/Desktop/prodj/grapher/src/components/Graph/Graph.tsx\",\n  _s = $RefreshSig$();\nimport { useState } from \"react\";\nimport \"../../styles/Canvas/Canvas.css\";\nimport Canvas from \"../Canvas/Canvas\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst generateID = (prefix, length) => {\n  const values = \"qwertyuiopasdfghjklzxcvbnmQWERTYUIOPASDFGHJKLZXCVBNM1234567890\";\n  var id = prefix + '-';\n  for (let i = 0; i < length; i++) {\n    let idx = Math.round(Math.random() * (values.length - 1));\n    id += values[idx];\n  }\n  return id;\n};\nconst Graph = props => {\n  _s();\n  const [graph, updateGraph] = useState({\n    vertices: {\n      \"a\": {\n        edges: [\"n\"],\n        position: {\n          x: 100,\n          y: 50\n        },\n        radius: 30\n      },\n      \"b\": {\n        edges: [\"n\"],\n        position: {\n          x: 10,\n          y: 250\n        },\n        radius: 31\n      }\n    },\n    edges: {\n      \"n\": {\n        vertices: {\n          a: \"a\",\n          b: \"b\"\n        },\n        weight: 10\n      }\n    }\n  });\n\n  /**\n   * Create a new vertex at the given position.\n   * @param position \n   */\n  const newVertex = position => {\n    //Generate the new vertex with a unique id\n    const id = generateID('vertex', 5);\n    const vertex = {\n      edges: [],\n      position: position,\n      radius: 30\n    };\n    updateGraph(prev => ({\n      ...prev,\n      vertices: {\n        ...prev.vertices,\n        [id]: vertex\n      }\n    }));\n  };\n\n  /**\n   * Create a new edge between the two given vertices. \n   * @param vertexA \n   * @param vertexB \n   * @returns\n   */\n  const newEdge = (vertexA, vertexB) => {\n    //make sure that both vertices exists\n    if (!(vertexA in graph.vertices && vertexB in graph.vertices)) return;\n\n    //make sure that the edge is between two different vertices (could be removed in the future)\n    if (vertexA == vertexB) return;\n\n    //make sure that this is a unique edge. For now only one edge can exist between a given set of vertices AB. \n    if (Object.entries(graph.edges).map(edge => {\n      return edge[1].vertices.a == vertexA && edge[1].vertices.b == vertexB || edge[1].vertices.b == vertexA && edge[1].vertices.a == vertexB;\n    }).some(val => val)) return;\n\n    //Generate the new edge with a unique id\n    const id = generateID('edge', 5);\n    const edge = {\n      vertices: {\n        a: vertexA,\n        b: vertexB\n      },\n      weight: 0\n    };\n\n    //update the involved vertices to be maped to this new edge\n    const updateVerticies = {\n      ...graph.vertices\n    };\n    updateVerticies[vertexA] = {\n      ...updateVerticies[vertexA],\n      edges: [...updateVerticies[vertexA].edges, id]\n    };\n    updateVerticies[vertexB] = {\n      ...updateVerticies[vertexB],\n      edges: [...updateVerticies[vertexB].edges, id]\n    };\n    updateGraph(prev => ({\n      vertices: updateVerticies,\n      edges: {\n        ...prev.edges,\n        [id]: edge\n      }\n    }));\n    console.log(graph);\n  };\n  const removeVertex = id => {\n    //make sure that the id exists in the graph\n    if (!(id in graph.vertices)) return;\n    const updateVerticies = {\n      ...graph.vertices\n    };\n    const updateEdges = {\n      ...graph.edges\n    };\n    updateVerticies[id].edges.forEach(e => {\n      delete updateEdges[e];\n    });\n    delete updateVerticies[id];\n    updateGraph(prev => ({\n      edges: updateEdges,\n      vertices: updateVerticies\n    }));\n  };\n  const removeEdge = () => {};\n  const moveVertex = (id, newPosition) => {\n    const updateVerticies = {\n      ...graph.vertices\n    };\n    updateVerticies[id] = {\n      ...updateVerticies[id],\n      position: newPosition\n    };\n    updateGraph(prev => ({\n      ...prev,\n      vertices: updateVerticies\n    }));\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(Canvas, {\n      graph: graph,\n      grafEdit: {\n        newVertex: newVertex,\n        deleteVertex: removeVertex,\n        newEdge: newEdge,\n        deleteEdge: removeEdge,\n        moveVertex: moveVertex\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 147,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 146,\n    columnNumber: 9\n  }, this);\n};\n_s(Graph, \"icImiJo9bTQVnRaryCHfeSkNsa0=\");\n_c = Graph;\nexport default Graph;\nvar _c;\n$RefreshReg$(_c, \"Graph\");","map":{"version":3,"names":["useState","Canvas","jsxDEV","_jsxDEV","generateID","prefix","length","values","id","i","idx","Math","round","random","Graph","props","_s","graph","updateGraph","vertices","edges","position","x","y","radius","a","b","weight","newVertex","vertex","prev","newEdge","vertexA","vertexB","Object","entries","map","edge","some","val","updateVerticies","console","log","removeVertex","updateEdges","forEach","e","removeEdge","moveVertex","newPosition","children","grafEdit","deleteVertex","deleteEdge","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/home/lby005/Desktop/prodj/grapher/src/components/Graph/Graph.tsx"],"sourcesContent":["import { MouseEvent, ReactNode, useCallback, useEffect, useRef, useState } from \"react\";\nimport \"../../styles/Canvas/Canvas.css\";\nimport Canvas from \"../Canvas/Canvas\";\nimport Edge from \"./Edge\";\n\ninterface IVertex {\n    edges : string[]\n    position : {x: number, y: number},\n    radius : number,\n}\n\ninterface IEdge {\n    vertices : {a: string, b: string}\n    weight : number\n}\n\nexport interface IGraph {\n    vertices : { [id: string] : IVertex },\n    edges : { [id: string] : IEdge }\n}\n\ninterface Props {\n\n}\n\nconst generateID = (prefix: string, length: number) => {\n    const values = \"qwertyuiopasdfghjklzxcvbnmQWERTYUIOPASDFGHJKLZXCVBNM1234567890\";\n    var id = prefix + '-';\n    for (let i = 0; i < length; i++) {\n        let idx = Math.round(Math.random() * (values.length-1));\n        id += values[idx];\n    }\n    return id;\n}\n\n\nconst Graph = (props: Props) => {\n\n    const [graph, updateGraph] = useState<IGraph>({vertices: {\n        \"a\" : {\n            edges: [\"n\"],\n            position : {x: 100, y: 50},\n            radius: 30\n        },\n        \"b\" : {\n            edges: [\"n\"],\n            position : {x: 10, y: 250},\n            radius: 31\n        }\n    }, edges: {\n        \"n\" : {\n  \n            vertices : {a: \"a\", b: \"b\"},\n            weight : 10\n        }\n    }})\n\n\n    /**\n     * Create a new vertex at the given position.\n     * @param position \n     */\n    const newVertex = (position:{x:number,y:number}) => {\n        //Generate the new vertex with a unique id\n        const id = generateID('vertex',5);\n        const vertex : IVertex = {\n            edges : [],\n            position : position,\n            radius : 30,\n        }\n\n        updateGraph((prev: IGraph) => ({...prev, vertices : {...prev.vertices, [id] : vertex}}))\n    }\n\n    /**\n     * Create a new edge between the two given vertices. \n     * @param vertexA \n     * @param vertexB \n     * @returns\n     */\n    const newEdge = (vertexA : string, vertexB : string) => {\n\n        //make sure that both vertices exists\n        if (!(vertexA in graph.vertices && vertexB in graph.vertices)) return\n     \n        //make sure that the edge is between two different vertices (could be removed in the future)\n        if ( vertexA == vertexB ) return;\n\n        //make sure that this is a unique edge. For now only one edge can exist between a given set of vertices AB. \n        if ( Object.entries(graph.edges).map(edge => {\n            return (edge[1].vertices.a == vertexA && edge[1].vertices.b == vertexB) || (edge[1].vertices.b == vertexA && edge[1].vertices.a == vertexB);\n        }).some(val => val)) return;\n\n        //Generate the new edge with a unique id\n        const id = generateID('edge',5);\n        const edge : IEdge = {\n            vertices : {a: vertexA, b: vertexB},\n            weight : 0,\n        }\n\n        //update the involved vertices to be maped to this new edge\n        const updateVerticies = {...graph.vertices};     \n        updateVerticies[vertexA] = {...updateVerticies[vertexA], edges :  [...updateVerticies[vertexA].edges, id]}\n        updateVerticies[vertexB] = {...updateVerticies[vertexB], edges :  [...updateVerticies[vertexB].edges, id]}\n\n        updateGraph((prev: IGraph) => ({vertices: updateVerticies, edges : {...prev.edges, [id] : edge}}))\n        \n        console.log(graph);\n        \n    }\n\n\n    const removeVertex = (id : string) => {\n        //make sure that the id exists in the graph\n        if (!(id in graph.vertices)) return;\n\n        const updateVerticies = {...graph.vertices};\n        const updateEdges = {...graph.edges};\n\n        updateVerticies[id].edges.forEach(e => {\n            delete updateEdges[e];\n        });\n    \n        delete updateVerticies[id];\n\n        updateGraph((prev: IGraph) => ({edges : updateEdges, vertices : updateVerticies}))\n    }\n\n    const removeEdge = () => {\n\n    }\n\n\n    const moveVertex = (id: string, newPosition: {x: number, y: number}) => {\n      \n        const updateVerticies = {...graph.vertices};     \n        updateVerticies[id] = {...updateVerticies[id], position :  newPosition}\n\n        updateGraph((prev: IGraph) => ({...prev, vertices : updateVerticies}))\n    }\n\n\n\n\n    return (\n        <div>\n            <Canvas graph={graph} grafEdit={{ \n                newVertex: newVertex,\n                deleteVertex: removeVertex,\n                newEdge: newEdge,\n                deleteEdge: removeEdge,\n                moveVertex: moveVertex \n                }}></Canvas>\n        </div>\n    );\n};\n\nexport default Graph;"],"mappings":";;AAAA,SAAgEA,QAAQ,QAAQ,OAAO;AACvF,OAAO,gCAAgC;AACvC,OAAOC,MAAM,MAAM,kBAAkB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAuBtC,MAAMC,UAAU,GAAGA,CAACC,MAAc,EAAEC,MAAc,KAAK;EACnD,MAAMC,MAAM,GAAG,gEAAgE;EAC/E,IAAIC,EAAE,GAAGH,MAAM,GAAG,GAAG;EACrB,KAAK,IAAII,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGH,MAAM,EAAEG,CAAC,EAAE,EAAE;IAC7B,IAAIC,GAAG,GAAGC,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,MAAM,CAAC,CAAC,IAAIN,MAAM,CAACD,MAAM,GAAC,CAAC,CAAC,CAAC;IACvDE,EAAE,IAAID,MAAM,CAACG,GAAG,CAAC;EACrB;EACA,OAAOF,EAAE;AACb,CAAC;AAGD,MAAMM,KAAK,GAAIC,KAAY,IAAK;EAAAC,EAAA;EAE5B,MAAM,CAACC,KAAK,EAAEC,WAAW,CAAC,GAAGlB,QAAQ,CAAS;IAACmB,QAAQ,EAAE;MACrD,GAAG,EAAG;QACFC,KAAK,EAAE,CAAC,GAAG,CAAC;QACZC,QAAQ,EAAG;UAACC,CAAC,EAAE,GAAG;UAAEC,CAAC,EAAE;QAAE,CAAC;QAC1BC,MAAM,EAAE;MACZ,CAAC;MACD,GAAG,EAAG;QACFJ,KAAK,EAAE,CAAC,GAAG,CAAC;QACZC,QAAQ,EAAG;UAACC,CAAC,EAAE,EAAE;UAAEC,CAAC,EAAE;QAAG,CAAC;QAC1BC,MAAM,EAAE;MACZ;IACJ,CAAC;IAAEJ,KAAK,EAAE;MACN,GAAG,EAAG;QAEFD,QAAQ,EAAG;UAACM,CAAC,EAAE,GAAG;UAAEC,CAAC,EAAE;QAAG,CAAC;QAC3BC,MAAM,EAAG;MACb;IACJ;EAAC,CAAC,CAAC;;EAGH;AACJ;AACA;AACA;EACI,MAAMC,SAAS,GAAIP,QAA4B,IAAK;IAChD;IACA,MAAMb,EAAE,GAAGJ,UAAU,CAAC,QAAQ,EAAC,CAAC,CAAC;IACjC,MAAMyB,MAAgB,GAAG;MACrBT,KAAK,EAAG,EAAE;MACVC,QAAQ,EAAGA,QAAQ;MACnBG,MAAM,EAAG;IACb,CAAC;IAEDN,WAAW,CAAEY,IAAY,KAAM;MAAC,GAAGA,IAAI;MAAEX,QAAQ,EAAG;QAAC,GAAGW,IAAI,CAACX,QAAQ;QAAE,CAACX,EAAE,GAAIqB;MAAM;IAAC,CAAC,CAAC,CAAC;EAC5F,CAAC;;EAED;AACJ;AACA;AACA;AACA;AACA;EACI,MAAME,OAAO,GAAGA,CAACC,OAAgB,EAAEC,OAAgB,KAAK;IAEpD;IACA,IAAI,EAAED,OAAO,IAAIf,KAAK,CAACE,QAAQ,IAAIc,OAAO,IAAIhB,KAAK,CAACE,QAAQ,CAAC,EAAE;;IAE/D;IACA,IAAKa,OAAO,IAAIC,OAAO,EAAG;;IAE1B;IACA,IAAKC,MAAM,CAACC,OAAO,CAAClB,KAAK,CAACG,KAAK,CAAC,CAACgB,GAAG,CAACC,IAAI,IAAI;MACzC,OAAQA,IAAI,CAAC,CAAC,CAAC,CAAClB,QAAQ,CAACM,CAAC,IAAIO,OAAO,IAAIK,IAAI,CAAC,CAAC,CAAC,CAAClB,QAAQ,CAACO,CAAC,IAAIO,OAAO,IAAMI,IAAI,CAAC,CAAC,CAAC,CAAClB,QAAQ,CAACO,CAAC,IAAIM,OAAO,IAAIK,IAAI,CAAC,CAAC,CAAC,CAAClB,QAAQ,CAACM,CAAC,IAAIQ,OAAQ;IAC/I,CAAC,CAAC,CAACK,IAAI,CAACC,GAAG,IAAIA,GAAG,CAAC,EAAE;;IAErB;IACA,MAAM/B,EAAE,GAAGJ,UAAU,CAAC,MAAM,EAAC,CAAC,CAAC;IAC/B,MAAMiC,IAAY,GAAG;MACjBlB,QAAQ,EAAG;QAACM,CAAC,EAAEO,OAAO;QAAEN,CAAC,EAAEO;MAAO,CAAC;MACnCN,MAAM,EAAG;IACb,CAAC;;IAED;IACA,MAAMa,eAAe,GAAG;MAAC,GAAGvB,KAAK,CAACE;IAAQ,CAAC;IAC3CqB,eAAe,CAACR,OAAO,CAAC,GAAG;MAAC,GAAGQ,eAAe,CAACR,OAAO,CAAC;MAAEZ,KAAK,EAAI,CAAC,GAAGoB,eAAe,CAACR,OAAO,CAAC,CAACZ,KAAK,EAAEZ,EAAE;IAAC,CAAC;IAC1GgC,eAAe,CAACP,OAAO,CAAC,GAAG;MAAC,GAAGO,eAAe,CAACP,OAAO,CAAC;MAAEb,KAAK,EAAI,CAAC,GAAGoB,eAAe,CAACP,OAAO,CAAC,CAACb,KAAK,EAAEZ,EAAE;IAAC,CAAC;IAE1GU,WAAW,CAAEY,IAAY,KAAM;MAACX,QAAQ,EAAEqB,eAAe;MAAEpB,KAAK,EAAG;QAAC,GAAGU,IAAI,CAACV,KAAK;QAAE,CAACZ,EAAE,GAAI6B;MAAI;IAAC,CAAC,CAAC,CAAC;IAElGI,OAAO,CAACC,GAAG,CAACzB,KAAK,CAAC;EAEtB,CAAC;EAGD,MAAM0B,YAAY,GAAInC,EAAW,IAAK;IAClC;IACA,IAAI,EAAEA,EAAE,IAAIS,KAAK,CAACE,QAAQ,CAAC,EAAE;IAE7B,MAAMqB,eAAe,GAAG;MAAC,GAAGvB,KAAK,CAACE;IAAQ,CAAC;IAC3C,MAAMyB,WAAW,GAAG;MAAC,GAAG3B,KAAK,CAACG;IAAK,CAAC;IAEpCoB,eAAe,CAAChC,EAAE,CAAC,CAACY,KAAK,CAACyB,OAAO,CAACC,CAAC,IAAI;MACnC,OAAOF,WAAW,CAACE,CAAC,CAAC;IACzB,CAAC,CAAC;IAEF,OAAON,eAAe,CAAChC,EAAE,CAAC;IAE1BU,WAAW,CAAEY,IAAY,KAAM;MAACV,KAAK,EAAGwB,WAAW;MAAEzB,QAAQ,EAAGqB;IAAe,CAAC,CAAC,CAAC;EACtF,CAAC;EAED,MAAMO,UAAU,GAAGA,CAAA,KAAM,CAEzB,CAAC;EAGD,MAAMC,UAAU,GAAGA,CAACxC,EAAU,EAAEyC,WAAmC,KAAK;IAEpE,MAAMT,eAAe,GAAG;MAAC,GAAGvB,KAAK,CAACE;IAAQ,CAAC;IAC3CqB,eAAe,CAAChC,EAAE,CAAC,GAAG;MAAC,GAAGgC,eAAe,CAAChC,EAAE,CAAC;MAAEa,QAAQ,EAAI4B;IAAW,CAAC;IAEvE/B,WAAW,CAAEY,IAAY,KAAM;MAAC,GAAGA,IAAI;MAAEX,QAAQ,EAAGqB;IAAe,CAAC,CAAC,CAAC;EAC1E,CAAC;EAKD,oBACIrC,OAAA;IAAA+C,QAAA,eACI/C,OAAA,CAACF,MAAM;MAACgB,KAAK,EAAEA,KAAM;MAACkC,QAAQ,EAAE;QAC5BvB,SAAS,EAAEA,SAAS;QACpBwB,YAAY,EAAET,YAAY;QAC1BZ,OAAO,EAAEA,OAAO;QAChBsB,UAAU,EAAEN,UAAU;QACtBC,UAAU,EAAEA;MACZ;IAAE;MAAAM,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAS;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACf,CAAC;AAEd,CAAC;AAACzC,EAAA,CAvHIF,KAAK;AAAA4C,EAAA,GAAL5C,KAAK;AAyHX,eAAeA,KAAK;AAAC,IAAA4C,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}