{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\larsb\\\\Desktop\\\\knowit\\\\grapher\\\\src\\\\components\\\\Canvas\\\\Canvas.tsx\",\n  _s = $RefreshSig$();\nimport { useRef, useState } from \"react\";\nimport \"../../styles/Canvas/Canvas.css\";\nimport Vertex, { Edge } from \"./GraphComponent\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst contain = (value, min, max) => {\n  return Math.min(Math.max(value, min), max);\n};\nconst Canvas = props => {\n  _s();\n  const canvas_ref = useRef(null);\n  const [dragging, isDragging] = useState(false);\n  const get_local_position = e => {\n    const canvas = canvas_ref.current.getBoundingClientRect();\n    return {\n      x: contain((e.clientX - canvas.left) * 100 / canvas.width, 0, 100),\n      y: contain((e.clientY - canvas.top) * 100 / canvas.height, 0, 100)\n    };\n  };\n  const move = (e, id) => {\n    props.grafEdit.update(id, get_local_position(e));\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    ref: canvas_ref,\n    className: \"canvas_container\",\n    onClick: e => e.ctrlKey ? props.grafEdit.newVertex(get_local_position(e)) : () => {},\n    onMouseMove: e => {\n      if (dragging) move(e, props.active);\n    },\n    onContextMenu: e => {\n      e.preventDefault();\n      console.log(props.graph);\n    },\n    onMouseUp: () => isDragging(false),\n    children: /*#__PURE__*/_jsxDEV(\"svg\", {\n      width: '100%',\n      height: '100%',\n      children: [Object.entries(props.graph.edges).map(edge => (!edge[1].double || props.graph.directed) && /*#__PURE__*/_jsxDEV(Edge, {\n        id: edge[0],\n        active: props.active == edge[0],\n        hovered: props.hovered == edge[0],\n        setHovered: props.setHoverd,\n        value: edge[1].weight.toString(),\n        directed: props.graph.directed,\n        weighted: props.graph.weighted,\n        position: props.graph.vertices[edge[1].vertices.a].position,\n        position2: props.graph.vertices[edge[1].vertices.b].position,\n        select: move\n      }, edge[0], false, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 54\n      }, this)), Object.entries(props.graph.vertices).map(vertex => /*#__PURE__*/_jsxDEV(Vertex, {\n        id: vertex[0],\n        select: move,\n        active: props.active == vertex[0],\n        hovered: props.hovered == vertex[0],\n        setHovered: props.setHoverd,\n        radius: 3,\n        value: vertex[1].symbol,\n        position: vertex[1].position\n      }, vertex[0], false, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 9\n      }, this))]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 6\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 49,\n    columnNumber: 5\n  }, this);\n};\n_s(Canvas, \"xwTg0sWAIWvPLgjOna0mrnpUEJU=\");\n_c = Canvas;\nexport default Canvas;\nvar _c;\n$RefreshReg$(_c, \"Canvas\");","map":{"version":3,"names":["useRef","useState","Vertex","Edge","jsxDEV","_jsxDEV","contain","value","min","max","Math","Canvas","props","_s","canvas_ref","dragging","isDragging","get_local_position","e","canvas","current","getBoundingClientRect","x","clientX","left","width","y","clientY","top","height","move","id","grafEdit","update","ref","className","onClick","ctrlKey","newVertex","onMouseMove","active","onContextMenu","preventDefault","console","log","graph","onMouseUp","children","Object","entries","edges","map","edge","double","directed","hovered","setHovered","setHoverd","weight","toString","weighted","position","vertices","a","position2","b","select","fileName","_jsxFileName","lineNumber","columnNumber","vertex","radius","symbol","_c","$RefreshReg$"],"sources":["C:/Users/larsb/Desktop/knowit/grapher/src/components/Canvas/Canvas.tsx"],"sourcesContent":["import { MouseEvent, useRef, useState } from \"react\";\r\nimport \"../../styles/Canvas/Canvas.css\";\r\nimport { IGraph } from \"../Graph/Graph\";\r\nimport Vertex, { Edge } from \"./GraphComponent\";\r\n\r\ninterface Props { \r\n  graph : IGraph,\r\n  grafEdit : {\r\n    newVertex : Function,\r\n    deleteVertex : Function,\r\n    newEdge : Function,\r\n    deleteEdge: Function,\r\n    moveVertex: Function,\r\n    update: Function\r\n  },\r\n  active : string,\r\n  setActive : Function,\r\n  hovered : string,\r\n  setHoverd : Function\r\n}\r\n\r\n\r\nconst contain = (value:number, min: number, max: number) => {\r\n  return Math.min(Math.max(value,min),max);\r\n}\r\n\r\nconst Canvas = (props: Props) => {\r\n\r\n  const canvas_ref = useRef<HTMLDivElement>(null);\r\n\r\n  const [dragging, isDragging] = useState<boolean>(false);\r\n\r\n  const get_local_position = (e: MouseEvent) => {\r\n    const canvas = canvas_ref.current!.getBoundingClientRect();\r\n    \r\n    return {\r\n      x: contain((e.clientX - canvas.left) * 100/canvas.width,0,100),\r\n      y: contain((e.clientY - canvas.top)* 100/canvas.height,0, 100),\r\n    }\r\n  }\r\n\r\n  const move = (e: MouseEvent,id:string) => {\r\n    props.grafEdit.update(id, get_local_position(e));\r\n  }\r\n  \r\n\r\n\r\n  return (\r\n    <div \r\n    ref = { canvas_ref}\r\n    className=\"canvas_container\"\r\n    onClick={(e: MouseEvent) => e.ctrlKey ? props.grafEdit.newVertex(get_local_position(e)) : () => {}}\r\n    onMouseMove={(e: MouseEvent) => {if(dragging) move(e,props.active)}}\r\n    onContextMenu={(e : MouseEvent) => {e.preventDefault();  console.log(props.graph);}}\r\n    onMouseUp={() => isDragging(false)}>\r\n     <svg width={'100%'} height={'100%'}>\r\n      {Object.entries(props.graph.edges).map((edge) => \r\n        (!edge[1].double || props.graph.directed) && <Edge \r\n          key={edge[0]}\r\n          id={edge[0]} \r\n          active={props.active == edge[0]}\r\n          hovered={props.hovered == edge[0]}\r\n          setHovered={props.setHoverd}\r\n          value={edge[1].weight.toString()}\r\n          directed={props.graph.directed}\r\n          weighted={props.graph.weighted}\r\n          position={props.graph.vertices[edge[1].vertices.a].position} \r\n          position2={props.graph.vertices[edge[1].vertices.b].position} \r\n          select={move}\r\n        ></Edge>\r\n      )}\r\n\r\n      {Object.entries(props.graph.vertices).map((vertex) => \r\n        <Vertex \r\n          key={vertex[0]} \r\n          id={vertex[0]}\r\n          select={move} \r\n          active={props.active == vertex[0]} \r\n          hovered={props.hovered == vertex[0]}\r\n          setHovered={props.setHoverd}\r\n          radius={3} \r\n          value={vertex[1].symbol}\r\n          position={vertex[1].position}\r\n        ></Vertex>\r\n      )}\r\n      </svg>\r\n    \r\n\r\n\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Canvas;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}