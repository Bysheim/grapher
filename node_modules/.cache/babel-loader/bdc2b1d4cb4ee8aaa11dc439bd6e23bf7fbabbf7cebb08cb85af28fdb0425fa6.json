{"ast":null,"code":"var _jsxFileName = \"/home/lby005/Desktop/prodj/grapher/src/components/Graph/Graph.tsx\",\n  _s = $RefreshSig$();\nimport { useState } from \"react\";\nimport \"../../styles/Canvas/Canvas.css\";\nimport Canvas from \"../Canvas/Canvas\";\nimport def_graph from './default.json';\nimport InfoBoard from \"../InfoBoard/InfoBoard\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst generateID = (prefix, length) => {\n  const values = \"qwertyuiopasdfghjklzxcvbnmQWERTYUIOPASDFGHJKLZXCVBNM1234567890\";\n  var id = prefix + '-';\n  for (let i = 0; i < length; i++) {\n    let idx = Math.round(Math.random() * (values.length - 1));\n    id += values[idx];\n  }\n  return id;\n};\nconst Graph = props => {\n  _s();\n  const [graph, updateGraph] = useState(def_graph);\n  const [active, setActive] = useState(\"\");\n  const [hovered, setHoverd] = useState(\"\");\n\n  /**\n   * Create a new vertex at the given position.\n   * @param position \n   */\n  const newVertex = position => {\n    //Generate the new vertex with a unique id\n    const id = generateID('vertex', 5);\n    const vertex = {\n      edges: [],\n      position: position,\n      symbol: ''\n    };\n    updateGraph(prev => ({\n      ...prev,\n      vertices: {\n        ...prev.vertices,\n        [id]: vertex\n      }\n    }));\n  };\n\n  /**\n   * Create a new edge between the two given vertices. \n   * @param vertexA \n   * @param vertexB \n   * @returns\n   */\n  const newEdge = (vertexA, vertexB) => {\n    //make sure that both vertices exists\n    if (!(vertexA in graph.vertices && vertexB in graph.vertices)) return;\n\n    //make sure that the edge is between two different vertices (could be removed in the future)\n    if (vertexA == vertexB) return;\n\n    //make sure that this is a unique edge. Only one edge can exist between a given set of vertices AB if the graph is undirected. \n    if (Object.entries(graph.edges).map(edge => {\n      if (!graph.directed && edge[1].vertices.b == vertexA && edge[1].vertices.a == vertexB) return true;\n      return edge[1].vertices.a == vertexA && edge[1].vertices.b == vertexB;\n    }).some(val => val)) return;\n\n    //Generate the new edge with a unique id\n    const id = generateID('edge', 5);\n    const edge = {\n      vertices: {\n        a: vertexA,\n        b: vertexB\n      },\n      weight: 0\n    };\n\n    //update the involved vertices to be maped to this new edge\n    const updateVerticies = {\n      ...graph.vertices\n    };\n    updateVerticies[vertexA] = {\n      ...updateVerticies[vertexA],\n      edges: [...updateVerticies[vertexA].edges, id]\n    };\n    updateVerticies[vertexB] = {\n      ...updateVerticies[vertexB],\n      edges: [...updateVerticies[vertexB].edges, id]\n    };\n    updateGraph(prev => ({\n      ...prev,\n      vertices: updateVerticies,\n      edges: {\n        ...prev.edges,\n        [id]: edge\n      }\n    }));\n  };\n  const removeVertex = id => {\n    //make sure that the id exists in the graph\n    if (!(id in graph.vertices)) return;\n    const updateVerticies = {\n      ...graph.vertices\n    };\n    const updateEdges = {\n      ...graph.edges\n    };\n    updateVerticies[id].edges.forEach(e => {\n      let va = updateEdges[e].vertices.a;\n      updateVerticies[va] = {\n        ...updateVerticies[va],\n        edges: updateVerticies[va].edges.filter(edge => edge !== e)\n      };\n      let vb = updateEdges[e].vertices.b;\n      updateVerticies[vb] = {\n        ...updateVerticies[vb],\n        edges: updateVerticies[vb].edges.filter(edge => edge !== e)\n      };\n      delete updateEdges[e];\n    });\n    delete updateVerticies[id];\n    setActive(\"\");\n    updateGraph(prev => ({\n      ...prev,\n      edges: updateEdges,\n      vertices: updateVerticies\n    }));\n  };\n  const removeEdge = id => {\n    //make sure that the id exists in the graph\n    if (!(id in graph.edges)) return;\n    const updateVerticies = {\n      ...graph.vertices\n    };\n    const updateEdges = {\n      ...graph.edges\n    };\n    let va = updateEdges[id].vertices.a;\n    updateVerticies[va] = {\n      ...updateVerticies[va],\n      edges: updateVerticies[va].edges.filter(edge => edge !== id)\n    };\n    let vb = updateEdges[id].vertices.b;\n    updateVerticies[vb] = {\n      ...updateVerticies[vb],\n      edges: updateVerticies[vb].edges.filter(edge => edge !== id)\n    };\n    delete updateEdges[id];\n    setActive(\"\");\n    updateGraph(prev => ({\n      ...prev,\n      edges: updateEdges,\n      vertices: updateVerticies\n    }));\n  };\n  const moveVertex = (id, newPosition) => {\n    const updateVerticies = {\n      ...graph.vertices\n    };\n    updateVerticies[id] = {\n      ...updateVerticies[id],\n      position: newPosition\n    };\n    updateGraph(prev => ({\n      ...prev,\n      vertices: updateVerticies\n    }));\n  };\n  const editWeight = (id, value) => {\n    const updateEdges = {\n      ...graph.edges\n    };\n    updateEdges[id] = {\n      ...updateEdges[id],\n      weight: value\n    };\n    updateGraph(prev => ({\n      ...prev,\n      edges: updateEdges\n    }));\n  };\n  const editLabel = (id, value) => {\n    const updateVerticies = {\n      ...graph.vertices\n    };\n    updateVerticies[id] = {\n      ...updateVerticies[id],\n      symbol: value\n    };\n    updateGraph(prev => ({\n      ...prev,\n      vertices: updateVerticies\n    }));\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(Canvas, {\n      graph: graph,\n      grafEdit: {\n        newVertex: newVertex,\n        deleteVertex: removeVertex,\n        newEdge: newEdge,\n        deleteEdge: removeEdge,\n        moveVertex: moveVertex\n      },\n      active: active,\n      setActive: setActive,\n      hovered: hovered,\n      setHoverd: setHoverd\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 171,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"checkbox\",\n        checked: graph.directed,\n        onChange: () => updateGraph(prev => ({\n          ...prev,\n          directed: !prev.directed\n        }))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 187,\n        columnNumber: 17\n      }, this), \"Directed\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 186,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"checkbox\",\n        checked: graph.weighted,\n        onChange: () => updateGraph(prev => ({\n          ...prev,\n          weighted: !prev.weighted\n        }))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 191,\n        columnNumber: 17\n      }, this), \"Weighted\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 190,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(InfoBoard, {\n      graph: graph,\n      active: active,\n      setActive: setActive,\n      setHovered: setHoverd,\n      editWeight: editWeight,\n      editLabel: editLabel\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 195,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 170,\n    columnNumber: 9\n  }, this);\n};\n_s(Graph, \"toV7Cb84YuOdUJR1DwfDglHAgn8=\");\n_c = Graph;\nexport default Graph;\nvar _c;\n$RefreshReg$(_c, \"Graph\");","map":{"version":3,"names":["useState","Canvas","def_graph","InfoBoard","jsxDEV","_jsxDEV","generateID","prefix","length","values","id","i","idx","Math","round","random","Graph","props","_s","graph","updateGraph","active","setActive","hovered","setHoverd","newVertex","position","vertex","edges","symbol","prev","vertices","newEdge","vertexA","vertexB","Object","entries","map","edge","directed","b","a","some","val","weight","updateVerticies","removeVertex","updateEdges","forEach","e","va","filter","vb","removeEdge","moveVertex","newPosition","editWeight","value","editLabel","children","grafEdit","deleteVertex","deleteEdge","fileName","_jsxFileName","lineNumber","columnNumber","type","checked","onChange","weighted","setHovered","_c","$RefreshReg$"],"sources":["/home/lby005/Desktop/prodj/grapher/src/components/Graph/Graph.tsx"],"sourcesContent":["import { MouseEvent, ReactNode, useCallback, useEffect, useRef, useState } from \"react\";\nimport \"../../styles/Canvas/Canvas.css\";\nimport Canvas from \"../Canvas/Canvas\";\n\nimport def_graph from './default.json';\nimport InfoBoard from \"../InfoBoard/InfoBoard\";\n\ninterface IVertex {\n    edges : string[]\n    position : {x: number, y: number},\n    symbol: string\n}\n\ninterface IEdge {\n    vertices : {a: string, b: string}\n    weight : number\n}\n\nexport interface IGraph {\n    weighted : boolean,\n    directed : boolean,\n    vertices : { [id: string] : IVertex },\n    edges : { [id: string] : IEdge }\n}\n\ninterface Props {\n\n}\n\nconst generateID = (prefix: string, length: number) => {\n    const values = \"qwertyuiopasdfghjklzxcvbnmQWERTYUIOPASDFGHJKLZXCVBNM1234567890\";\n    var id = prefix + '-';\n    for (let i = 0; i < length; i++) {\n        let idx = Math.round(Math.random() * (values.length-1));\n        id += values[idx];\n    }\n    return id;\n}\n\n\nconst Graph = (props: Props) => {\n\n    const [graph, updateGraph] = useState<IGraph>(def_graph);\n    const [active, setActive] = useState<string>(\"\");\n    const [hovered, setHoverd] = useState<string>(\"\");\n\n    /**\n     * Create a new vertex at the given position.\n     * @param position \n     */\n    const newVertex = (position:{x:number,y:number}) => {\n        //Generate the new vertex with a unique id\n        const id = generateID('vertex',5);\n        const vertex : IVertex = {\n            edges : [],\n            position : position,\n            symbol: ''\n        }\n\n        updateGraph((prev: IGraph) => ({...prev, vertices : {...prev.vertices, [id] : vertex}}))\n    }\n    \n    /**\n     * Create a new edge between the two given vertices. \n     * @param vertexA \n     * @param vertexB \n     * @returns\n     */\n    const newEdge = (vertexA : string, vertexB : string) => {\n\n        //make sure that both vertices exists\n        if (!(vertexA in graph.vertices && vertexB in graph.vertices)) return\n     \n        //make sure that the edge is between two different vertices (could be removed in the future)\n        if ( vertexA == vertexB ) return;\n\n        //make sure that this is a unique edge. Only one edge can exist between a given set of vertices AB if the graph is undirected. \n        if ( Object.entries(graph.edges).map(edge => {\n            if ( !graph.directed && edge[1].vertices.b == vertexA && edge[1].vertices.a == vertexB) return true;\n            return (edge[1].vertices.a == vertexA && edge[1].vertices.b == vertexB);\n        }).some(val => val)) return;\n\n        //Generate the new edge with a unique id\n        const id = generateID('edge',5);\n        const edge : IEdge = {\n            vertices : {a: vertexA, b: vertexB},\n            weight : 0,\n        }\n\n        //update the involved vertices to be maped to this new edge\n        const updateVerticies = {...graph.vertices};     \n        updateVerticies[vertexA] = {...updateVerticies[vertexA], edges :  [...updateVerticies[vertexA].edges, id]}\n        updateVerticies[vertexB] = {...updateVerticies[vertexB], edges :  [...updateVerticies[vertexB].edges, id]}\n\n        updateGraph((prev: IGraph) => ({...prev, vertices: updateVerticies, edges : {...prev.edges, [id] : edge}}))\n        \n    }\n\n\n    const removeVertex = (id : string) => {\n        //make sure that the id exists in the graph\n        if (!(id in graph.vertices)) return;\n\n        const updateVerticies = {...graph.vertices};\n        const updateEdges = {...graph.edges};\n\n        updateVerticies[id].edges.forEach(e => {\n\n            let va = updateEdges[e].vertices.a;\n            updateVerticies[va] = {...updateVerticies[va], edges :  updateVerticies[va].edges.filter(edge => edge !== e)};\n            \n            let vb = updateEdges[e].vertices.b;\n            updateVerticies[vb] = {...updateVerticies[vb], edges :  updateVerticies[vb].edges.filter(edge => edge !== e)};\n\n\n            delete updateEdges[e];\n        });\n    \n        delete updateVerticies[id];\n\n        setActive(\"\");\n\n        updateGraph((prev: IGraph) => ({...prev, edges : updateEdges, vertices : updateVerticies}))\n    }\n\n    const removeEdge = (id : string) => {\n        //make sure that the id exists in the graph\n        if (!(id in graph.edges)) return;\n\n        const updateVerticies = {...graph.vertices};\n        const updateEdges = {...graph.edges};\n\n        let va = updateEdges[id].vertices.a\n        updateVerticies[va] = {...updateVerticies[va], edges :updateVerticies[va].edges.filter(edge => edge !== id)}\n        let vb = updateEdges[id].vertices.b\n        updateVerticies[vb] = {...updateVerticies[vb], edges :updateVerticies[vb].edges.filter(edge => edge !== id)}\n        \n        delete updateEdges[id];\n        \n        setActive(\"\");\n\n        updateGraph((prev: IGraph) => ({...prev, edges : updateEdges, vertices : updateVerticies}))\n    }\n\n\n    const moveVertex = (id: string, newPosition: {x: number, y: number}) => {\n      \n        const updateVerticies = {...graph.vertices};     \n        updateVerticies[id] = {...updateVerticies[id], position :  newPosition}\n\n        updateGraph((prev: IGraph) => ({...prev, vertices : updateVerticies}))\n    }\n\n    const editWeight = (id: string, value: number) => {    \n        const updateEdges = {...graph.edges};\n        updateEdges[id] = {...updateEdges[id], weight : value};\n\n        updateGraph((prev: IGraph) => ({...prev, edges : updateEdges}))\n    }\n\n    const editLabel = (id: string, value: string) => {    \n        const updateVerticies = {...graph.vertices};     \n        updateVerticies[id] = {...updateVerticies[id], symbol :  value}\n\n        updateGraph((prev: IGraph) => ({...prev, vertices : updateVerticies}))\n    }\n\n\n    return (\n        <div>\n            <Canvas \n                graph={graph}\n                grafEdit={{ \n                    newVertex: newVertex,\n                    deleteVertex: removeVertex,\n                    newEdge: newEdge,\n                    deleteEdge: removeEdge,\n                    moveVertex: moveVertex \n                }}\n                active={active}\n                setActive={setActive}\n                hovered={hovered}\n                setHoverd={setHoverd}></Canvas>\n\n\n            <label>\n                <input type=\"checkbox\" checked={graph.directed} onChange={() => updateGraph((prev: IGraph) => ({...prev, directed : !prev.directed}))}/>\n                Directed\n            </label>\n            <label>\n                <input type=\"checkbox\" checked={graph.weighted} onChange={() => updateGraph((prev: IGraph) => ({...prev, weighted : !prev.weighted}))}/>\n                Weighted\n            </label>\n\n            <InfoBoard \n                graph={graph} \n                active={active}\n                setActive={setActive}\n                setHovered={setHoverd}\n                editWeight={editWeight}\n                editLabel={editLabel}>\n            </InfoBoard>\n\n        </div>\n    );\n};\n\nexport default Graph;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}