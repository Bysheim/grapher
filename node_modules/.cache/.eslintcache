[{"/home/lby005/Desktop/prodj/delt/grapher/src/index.tsx":"1","/home/lby005/Desktop/prodj/delt/grapher/src/reportWebVitals.ts":"2","/home/lby005/Desktop/prodj/delt/grapher/src/App.tsx":"3","/home/lby005/Desktop/prodj/delt/grapher/src/components/Graph/Graph.tsx":"4","/home/lby005/Desktop/prodj/delt/grapher/src/components/Canvas/Canvas.tsx":"5","/home/lby005/Desktop/prodj/delt/grapher/src/components/InfoBoard/InfoBoard.tsx":"6","/home/lby005/Desktop/prodj/delt/grapher/src/components/ToolBar/Toolbar.tsx":"7","/home/lby005/Desktop/prodj/delt/grapher/src/components/Canvas/GraphComponent.tsx":"8","/home/lby005/Desktop/prodj/delt/grapher/src/tools/Geometry.ts":"9"},{"size":513,"mtime":1695479679405,"results":"10","hashOfConfig":"11"},{"size":425,"mtime":1695479679405,"results":"12","hashOfConfig":"11"},{"size":242,"mtime":1695479679401,"results":"13","hashOfConfig":"11"},{"size":10348,"mtime":1695479679405,"results":"14","hashOfConfig":"11"},{"size":2349,"mtime":1695479679405,"results":"15","hashOfConfig":"11"},{"size":2684,"mtime":1695479679405,"results":"16","hashOfConfig":"11"},{"size":804,"mtime":1695479679405,"results":"17","hashOfConfig":"11"},{"size":3384,"mtime":1695479679405,"results":"18","hashOfConfig":"11"},{"size":1435,"mtime":1695479679405,"results":"19","hashOfConfig":"11"},{"filePath":"20","messages":"21","suppressedMessages":"22","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"pyxohg",{"filePath":"23","messages":"24","suppressedMessages":"25","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"26","messages":"27","suppressedMessages":"28","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"29"},{"filePath":"30","messages":"31","suppressedMessages":"32","errorCount":0,"fatalErrorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"33"},{"filePath":"34","messages":"35","suppressedMessages":"36","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"37","messages":"38","suppressedMessages":"39","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"40"},{"filePath":"41","messages":"42","suppressedMessages":"43","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"44"},{"filePath":"45","messages":"46","suppressedMessages":"47","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"48","messages":"49","suppressedMessages":"50","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/home/lby005/Desktop/prodj/delt/grapher/src/index.tsx",[],[],"/home/lby005/Desktop/prodj/delt/grapher/src/reportWebVitals.ts",[],[],"/home/lby005/Desktop/prodj/delt/grapher/src/App.tsx",["51"],[],"import React from 'react';\nimport './App.css';\nimport Canvas from './components/Canvas/Canvas';\nimport Graph from './components/Graph/Graph';\n\nfunction App() {\n  return (\n    <div>\n      <Graph></Graph>\n    </div>\n  );\n}\n\nexport default App;\n","/home/lby005/Desktop/prodj/delt/grapher/src/components/Graph/Graph.tsx",["52","53","54","55","56","57","58","59","60","61"],[],"import { useState } from \"react\";\nimport \"../../styles/Graph/Graph.css\";\nimport Canvas from \"../Canvas/Canvas\";\n\nimport def_graph from './default.json';\nimport InfoBoard from \"../InfoBoard/InfoBoard\";\nimport Toolbar from \"../ToolBar/Toolbar\";\n\ninterface IVertex {\n    edges : string[]\n    position : {x: number, y: number},\n    symbol: string\n}\n\ninterface IEdge {\n    vertices : {a: string, b: string},\n    weight : number,\n    double : boolean,\n}\n\nexport interface IGraph {\n    weighted : boolean,\n    directed : boolean,\n    vertices : { [id: string] : IVertex },\n    edges : { [id: string] : IEdge }\n}\n\ninterface Props {};\n\n/**\n * Generates a random id on the format \"prefix-xxxx\"\n * @param prefix indicates what type of component this id is for\n * @param length the lenght of the random symbols following the prefix\n * @returns \n */\nconst generateID = (prefix: string, length: number) => {\n    const values = \"qwertyuiopasdfghjklzxcvbnmQWERTYUIOPASDFGHJKLZXCVBNM1234567890\";\n    var id = prefix + '-';\n    for (let i = 0; i < length; i++) {\n        let idx = Math.round(Math.random() * (values.length-1));\n        id += values[idx];\n    }\n    return id;\n}\n\n\nconst Graph = (props: Props) => {\n\n    const [graph, updateGraph] = useState<IGraph>(def_graph);\n    const [active, setActive] = useState<string>(\"\");\n    const [hovered, setHoverd] = useState<string>(\"\");\n    const [toolState, setToolstate] = useState<string>(\"select\");\n\n\n    /**\n     * Create a new vertex at the given position.\n     * @param position \n     */\n    const newVertex = (position:{x:number,y:number}) => {\n        //Generate the new vertex with a unique id\n        const id = generateID('vertex',5);\n        const vertex : IVertex = {\n            edges : [],\n            position : position,\n            symbol: ''\n        }\n\n        updateGraph((prev: IGraph) => ({...prev, vertices : {...prev.vertices, [id] : vertex}}))\n        setActive((prev) => id);\n    }\n\n    \n    /**\n     * Create a new edge between the two given vertices. \n     * @param vertexA \n     * @param vertexB \n     * @returns\n     */\n    const newEdge = (vertexA : string, vertexB : string) => {\n\n        //make sure that both vertices exists\n        if (!(vertexA in graph.vertices && vertexB in graph.vertices)) return\n     \n        //make sure that the edge is between two different vertices (could be removed in the future)\n        if ( vertexA == vertexB ) return;\n\n        let double = false;\n\n        //make sure that this is a unique edge. Only one edge can exist between a given set of vertices AB if the graph is undirected. \n        if ( Object.entries(graph.edges).map(edge => {\n            if ( edge[1].vertices.b == vertexA && edge[1].vertices.a == vertexB ) {\n                if (graph.directed) double = true;\n                else return true;\n            }\n            return (edge[1].vertices.a == vertexA && edge[1].vertices.b == vertexB);\n        }).some(val => val)) return;\n\n        //Generate the new edge with a unique id\n        const id = generateID('edge',5);\n        const edge : IEdge = {\n            vertices : {a: vertexA, b: vertexB},\n            weight : 0,\n            double : double\n        }\n\n        //update the involved vertices to be maped to this new edge\n        const updateVerticies = {...graph.vertices};     \n        updateVerticies[vertexA] = {...updateVerticies[vertexA], edges :  [...updateVerticies[vertexA].edges, id]}\n        updateVerticies[vertexB] = {...updateVerticies[vertexB], edges :  [...updateVerticies[vertexB].edges, id]}\n\n        updateGraph((prev: IGraph) => ({...prev, vertices: updateVerticies, edges : {...prev.edges, [id] : edge}}))\n        setActive((prev) => id);\n    }\n\n    /**\n     * Remove the given vertex, and all edges connected to it\n     * @param id the id of the vertex\n     * @returns \n     */\n    const removeVertex = (id : string) => {\n        //make sure that the id exists in the graph\n        if (!(id in graph.vertices)) return;\n\n        const updateVerticies = {...graph.vertices};\n        const updateEdges = {...graph.edges};\n\n        //remove all connected edges and update their other connected node to no longer refrence this edge.\n        updateVerticies[id].edges.forEach(e => {\n\n            let va = updateEdges[e].vertices.a;\n            updateVerticies[va] = {...updateVerticies[va], edges :  updateVerticies[va].edges.filter(edge => edge !== e)};\n            \n            let vb = updateEdges[e].vertices.b;\n            updateVerticies[vb] = {...updateVerticies[vb], edges :  updateVerticies[vb].edges.filter(edge => edge !== e)};\n\n\n            delete updateEdges[e];\n        });\n    \n        delete updateVerticies[id];\n\n        updateGraph((prev: IGraph) => ({...prev, edges : updateEdges, vertices : updateVerticies}))\n        setActive((prev) => \"\");\n    }\n\n    /**\n     * Remove the given edge\n     * @param id the id of the edge to remove\n     * @returns \n     */\n    const removeEdge = (id : string) => {\n        //make sure that the id exists in the graph\n        if (!(id in graph.edges)) return;\n\n        const updateVerticies = {...graph.vertices};\n        const updateEdges = {...graph.edges};\n\n        //remove the edge and update the connected vertices to no longer refrence this edge\n        let va = updateEdges[id].vertices.a\n        updateVerticies[va] = {...updateVerticies[va], edges :updateVerticies[va].edges.filter(edge => edge !== id)}\n        let vb = updateEdges[id].vertices.b\n        updateVerticies[vb] = {...updateVerticies[vb], edges :updateVerticies[vb].edges.filter(edge => edge !== id)}\n        \n        delete updateEdges[id];\n\n        updateGraph((prev: IGraph) => ({...prev, edges : updateEdges, vertices : updateVerticies}))\n        setActive((prev) => \"\");\n    }\n\n \n    /**\n     * move a vertex to a new position\n     * @param id the id of the vertex to move\n     * @param newPosition the new position for the vertex\n     */\n    const moveVertex = (id: string, newPosition: {x: number, y: number}) => {\n        const updateVerticies = {...graph.vertices};     \n        updateVerticies[id] = {...updateVerticies[id], position :  newPosition}\n\n        updateGraph((prev: IGraph) => ({...prev, vertices : updateVerticies}))\n    }\n\n    /**\n     * Set a new weight value for an edge in a weighted graph\n     * @param id the id of the edge to update\n     * @param value the new weight\n     */\n    const editWeight = (id: string, value: number) => {    \n        const updateEdges = {...graph.edges};\n        updateEdges[id] = {...updateEdges[id], weight : value};\n\n        updateGraph((prev: IGraph) => ({...prev, edges : updateEdges}))\n    }\n\n    /**\n     * Set a new label for a vertex\n     * @param id the id of the vertex to update\n     * @param value the new label\n     */\n    const editLabel = (id: string, value: string) => {    \n        const updateVerticies = {...graph.vertices};     \n        updateVerticies[id] = {...updateVerticies[id], symbol :  value}\n\n        updateGraph((prev: IGraph) => ({...prev, vertices : updateVerticies}))\n    }\n\n    /**\n     * fetch a color based on if the components id is marked as active, hovered or none of them\n     * @param id the id of the graph component\n     * @returns a string representing a color name or color code.\n     */\n    const getColor = (id:string) => {\n        return active == id ? \"salmon\" : hovered == id ? \"skyblue\" : \"#F3E99F\"\n    };\n\n    /**\n     * Checks if an id belongs to a vertex. Should be used with ids generated by the generateID method.\n     * @param id the id to check\n     * @returns true if the prefix of the id is 'vertex', false if not\n     */\n    const isVertex = (id: string) => {\n        return id.split('-')[0] == 'vertex';\n    }\n\n    /**\n     * Based on the toolstate, this method determins what to do when this method is called from a component.\n     * @param id the id of the component calling the method\n     * @param position the position of the cursor at the time of calling this method\n     */\n    const update = (id : string = \"\", position : {x:number, y: number}) => {\n        let vertex = isVertex(id); \n        \n        switch (toolState) {\n            case 'select':\n                if ( vertex ) moveVertex(id,position);\n                if ( id != \"\") setActive((prev) => id);\n                break;\n            case 'delete':\n                vertex ? removeVertex(id) : removeEdge(id);\n                break;\n            case 'add':\n                if ( vertex && isVertex(active) ) newEdge(active,id);\n                else if ( id == \"\" ) newVertex(position);\n                else setActive((prev) => id);\n                break;\n            default:\n                break;\n        }\n    }\n\n    return (\n        <div className=\"graph-container\">\n            <div className=\"graph-header\">\n                Grapher\n            </div>\n            <div className=\"graph-body\">\n                <InfoBoard \n                    graph={graph} \n                    active={active}\n                    setActive={setActive}\n                    setHovered={setHoverd}\n                    editWeight={editWeight}\n                    editLabel={editLabel}></InfoBoard>\n\n                <Canvas \n                    graph={graph}\n                    updateGraph={update}\n                    active={active}\n                    hovered={hovered}\n                    setHoverd={setHoverd}\n                    getColor={getColor}\n                ></Canvas>\n\n                <div> **algoritmeverktøy**</div>\n\n            </div>\n            <div className=\"graph-footer\">\n                <div onChange={() => setActive(\"\")}>\n                    <label>\n                        <input type=\"checkbox\" checked={graph.directed} onChange={() => updateGraph((prev: IGraph) => ({...prev, directed : !prev.directed}))}/>\n                        Directed\n                    </label>\n                    <label>\n                        <input type=\"checkbox\" checked={graph.weighted} onChange={() => updateGraph((prev: IGraph) => ({...prev, weighted : !prev.weighted}))}/>\n                        Weighted\n                    </label>\n                </div>\n                \n                <Toolbar toolState={toolState} setToolState={(newState:string) => {setToolstate((prev) => newState); setActive('')}}></Toolbar>\n            </div>\n\n\n\n\n\n\n\n        </div>\n    );\n};\n\nexport default Graph;","/home/lby005/Desktop/prodj/delt/grapher/src/components/Canvas/Canvas.tsx",[],[],"/home/lby005/Desktop/prodj/delt/grapher/src/components/InfoBoard/InfoBoard.tsx",["62","63"],[],"import { MouseEvent } from \"react\";\nimport \"../../styles/InfoBoard/InfoBoard.css\";\nimport { IGraph } from \"../Graph/Graph\";\n\n\ninterface Props { \n  graph : IGraph,\n  active : string,\n  setActive : Function,\n  setHovered : Function,\n  editWeight : Function,\n  editLabel : Function\n}\n\n\nexport const InfoBoard = (props: Props) => {\n  \n  return (\n \n      props.active && (\n          (props.graph.vertices[props.active] && (\n              <div className=\"infoboard_container\">\n                  <div>Label: </div>\n                  <input type=\"text\" maxLength={5} value={props.graph.vertices[props.active].symbol} onChange={(e:any) => props.editLabel(props.active,e.target.value)}></input>\n                  <div>Edges:</div>\n                  { props.graph.vertices[props.active].edges.map((edge:string,i:number) => \n                      (!props.graph.edges[edge].double || props.graph.directed) && <div  \n                        key={edge + ':label-' + i}\n                        className=\"listed_button\"\n                        onClick={(e:MouseEvent) => props.setActive(edge)}\n                        onMouseOver={(e:MouseEvent) => props.setHovered(edge)}\n                        onMouseLeave={(e: MouseEvent) => props.setHovered(\"\")}>\n                          {props.graph.vertices[props.graph.edges[edge].vertices.a].symbol + ' - ' + props.graph.vertices[props.graph.edges[edge].vertices.b].symbol}\n                        </div>\n                  )}\n              </div>\n          )) || (\n              <div className=\"infoboard_container\">\n                  {props.graph.weighted && <div>Weight: {props.graph.edges[props.active].weight}</div>}\n                  {props.graph.weighted && <input className=\"ranger\" type=\"range\" min={0} max={200} value={props.graph.edges[props.active].weight} onChange={(e:any) => props.editWeight(props.active,e.target.valueAsNumber)}></input>}\n                  <div>Noder:</div>\n                  {\n                    Object.entries(props.graph.edges[props.active].vertices).map((vertex,i) => \n                      <div  \n                        key={vertex[1] + ':label-' + i}\n                        className=\"listed_button\"\n                        onClick={(e:MouseEvent) => props.setActive(vertex[1])}\n                        onMouseOver={(e:MouseEvent) => props.setHovered(vertex[1])}\n                        onMouseLeave={(e: MouseEvent) => props.setHovered(\"\")}>\n                        {props.graph.vertices[vertex[1] as string].symbol}\n                      </div>\n                    )\n                  }\n              </div>\n          )\n      ) || <div className=\"infoboard_container\"></div>\n\n  );\n};\n\n\nexport default InfoBoard;\n","/home/lby005/Desktop/prodj/delt/grapher/src/components/ToolBar/Toolbar.tsx",["64","65","66"],[],"\n\ninterface Props { \n  toolState : string,\n  setToolState : Function,\n}\n\n\nexport const Toolbar = (props: Props) => {\n  \n\n  return (\n    <div>\n      <label className=\"container\">\n          <input id=\"select\" type=\"radio\" name=\"radio\" checked={props.toolState == 'select'} onChange={(e) => props.setToolState('select')}/>\n          Select\n      </label>\n      <label className=\"container\">\n          <input id=\"add\" type=\"radio\" name=\"radio\" checked={props.toolState == 'add'} onChange={(e) => props.setToolState('add')}/>\n          Add\n      </label>\n      <label className=\"container\">\n          <input id=\"delete\" type=\"radio\" name=\"radio\" checked={props.toolState == 'delete'} onChange={(e) => props.setToolState('delete')}/>\n          Delete\n      </label>\n  </div>\n\n  );\n};\n\n\nexport default Toolbar;\n","/home/lby005/Desktop/prodj/delt/grapher/src/components/Canvas/GraphComponent.tsx",[],[],"/home/lby005/Desktop/prodj/delt/grapher/src/tools/Geometry.ts",[],[],{"ruleId":"67","severity":1,"message":"68","line":3,"column":8,"nodeType":"69","messageId":"70","endLine":3,"endColumn":14},{"ruleId":"71","severity":1,"message":"72","line":85,"column":22,"nodeType":"73","messageId":"74","endLine":85,"endColumn":24},{"ruleId":"71","severity":1,"message":"72","line":91,"column":37,"nodeType":"73","messageId":"74","endLine":91,"endColumn":39},{"ruleId":"71","severity":1,"message":"72","line":91,"column":70,"nodeType":"73","messageId":"74","endLine":91,"endColumn":72},{"ruleId":"71","severity":1,"message":"72","line":95,"column":40,"nodeType":"73","messageId":"74","endLine":95,"endColumn":42},{"ruleId":"71","severity":1,"message":"72","line":95,"column":73,"nodeType":"73","messageId":"74","endLine":95,"endColumn":75},{"ruleId":"71","severity":1,"message":"72","line":213,"column":23,"nodeType":"73","messageId":"74","endLine":213,"endColumn":25},{"ruleId":"71","severity":1,"message":"72","line":213,"column":50,"nodeType":"73","messageId":"74","endLine":213,"endColumn":52},{"ruleId":"71","severity":1,"message":"72","line":222,"column":33,"nodeType":"73","messageId":"74","endLine":222,"endColumn":35},{"ruleId":"71","severity":1,"message":"75","line":236,"column":25,"nodeType":"73","messageId":"74","endLine":236,"endColumn":27},{"ruleId":"71","severity":1,"message":"72","line":243,"column":30,"nodeType":"73","messageId":"74","endLine":243,"endColumn":32},{"ruleId":"76","severity":1,"message":"77","line":20,"column":20,"nodeType":"78","messageId":"79","endLine":20,"endColumn":22},{"ruleId":"76","severity":1,"message":"77","line":56,"column":9,"nodeType":"78","messageId":"79","endLine":56,"endColumn":11},{"ruleId":"71","severity":1,"message":"72","line":15,"column":81,"nodeType":"73","messageId":"74","endLine":15,"endColumn":83},{"ruleId":"71","severity":1,"message":"72","line":19,"column":78,"nodeType":"73","messageId":"74","endLine":19,"endColumn":80},{"ruleId":"71","severity":1,"message":"72","line":23,"column":81,"nodeType":"73","messageId":"74","endLine":23,"endColumn":83},"@typescript-eslint/no-unused-vars","'Canvas' is defined but never used.","Identifier","unusedVar","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","Expected '!==' and instead saw '!='.","no-mixed-operators","Unexpected mix of '&&' and '||'. Use parentheses to clarify the intended order of operations.","LogicalExpression","unexpectedMixedOperator"]